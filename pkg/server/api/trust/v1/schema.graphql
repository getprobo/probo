# Directives
directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goEnum(value: String) on ENUM_VALUE

directive @mustBeAuthenticated(role: Role = NONE) on FIELD_DEFINITION | OBJECT

enum Role {
  NONE
  USER
}

scalar Datetime
scalar CursorKey

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: CursorKey
  endCursor: CursorKey
}

type Organization implements Node {
  id: ID!
  name: String!
  logoUrl: String @goField(forceResolver: true)

  description: String
  websiteUrl: String
  email: String
  headquarterAddress: String
}

enum DocumentType
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.DocumentType") {
  OTHER
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.DocumentTypeOther")
  ISMS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.DocumentTypeISMS")
  POLICY
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.DocumentTypePolicy")
}

type Document implements Node {
  id: ID!
  title: String!
  documentType: DocumentType!
  isUserAuthorized: Boolean! @goField(forceResolver: true)
  hasUserRequestedAccess: Boolean! @goField(forceResolver: true)
}

type DocumentConnection {
  edges: [DocumentEdge!]!
  pageInfo: PageInfo!
}

type DocumentEdge {
  cursor: CursorKey!
  node: Document!
}


type Framework implements Node {
  id: ID!
  name: String!
}

type Report implements Node {
  id: ID!
  filename: String!
  isUserAuthorized: Boolean! @goField(forceResolver: true)
  hasUserRequestedAccess: Boolean! @goField(forceResolver: true)
}

type Audit implements Node {
  id: ID!
  framework: Framework! @goField(forceResolver: true)
  report: Report @goField(forceResolver: true)
}

type AuditConnection {
  edges: [AuditEdge!]!
  pageInfo: PageInfo!
}

type AuditEdge {
  cursor: CursorKey!
  node: Audit!
}

enum CountryCode
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.CountryCode") {
  AD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAD")
  AE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAE")
  AF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAF")
  AG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAG")
  AI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAI")
  AL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAL")
  AM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAM")
  AO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAO")
  AQ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAQ")
  AR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAR")
  AS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAS")
  AT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAT")
  AU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAU")
  AW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAW")
  AX @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAX")
  AZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAZ")
  BA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBA")
  BB @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBB")
  BD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBD")
  BE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBE")
  BF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBF")
  BG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBG")
  BH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBH")
  BI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBI")
  BJ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBJ")
  BL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBL")
  BM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBM")
  BN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBN")
  BO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBO")
  BQ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBQ")
  BR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBR")
  BS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBS")
  BT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBT")
  BV @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBV")
  BW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBW")
  BY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBY")
  BZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBZ")
  CA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCA")
  CC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCC")
  CD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCD")
  CF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCF")
  CG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCG")
  CH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCH")
  CI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCI")
  CK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCK")
  CL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCL")
  CM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCM")
  CN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCN")
  CO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCO")
  CR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCR")
  CU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCU")
  CV @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCV")
  CW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCW")
  CX @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCX")
  CY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCY")
  CZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCZ")
  DE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeDE")
  DJ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeDJ")
  DK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeDK")
  DM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeDM")
  DO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeDO")
  DZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeDZ")
  EC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeEC")
  EE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeEE")
  EG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeEG")
  EH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeEH")
  ER @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeER")
  ES @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeES")
  ET @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeET")
  FI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeFI")
  FJ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeFJ")
  FK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeFK")
  FM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeFM")
  FO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeFO")
  FR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeFR")
  GA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGA")
  GB @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGB")
  GD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGD")
  GE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGE")
  GF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGF")
  GG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGG")
  GH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGH")
  GI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGI")
  GL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGL")
  GM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGM")
  GN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGN")
  GP @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGP")
  GQ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGQ")
  GR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGR")
  GT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGT")
  GU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGU")
  GW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGW")
  GY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGY")
  HK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeHK")
  HM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeHM")
  HN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeHN")
  HR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeHR")
  HT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeHT")
  HU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeHU")
  ID @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeID")
  IE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIE")
  IL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIL")
  IM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIM")
  IN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIN")
  IO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIO")
  IQ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIQ")
  IR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIR")
  IS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIS")
  IT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIT")
  JE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeJE")
  JM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeJM")
  JO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeJO")
  JP @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeJP")
  KE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKE")
  KG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKG")
  KH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKH")
  KI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKI")
  KM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKM")
  KN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKN")
  KP @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKP")
  KR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKR")
  KW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKW")
  KY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKY")
  KZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKZ")
  LA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLA")
  LB @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLB")
  LC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLC")
  LI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLI")
  LK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLK")
  LR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLR")
  LS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLS")
  LT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLT")
  LU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLU")
  LV @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLV")
  LY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLY")
  MA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMA")
  MC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMC")
  MD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMD")
  ME @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeME")
  MF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMF")
  MG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMG")
  MH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMH")
  MK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMK")
  ML @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeML")
  MM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMM")
  MN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMN")
  MO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMO")
  MP @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMP")
  MQ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMQ")
  MR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMR")
  MS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMS")
  MT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMT")
  MU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMU")
  MV @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMV")
  MW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMW")
  MX @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMX")
  MY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMY")
  MZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMZ")
  NA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNA")
  NC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNC")
  NE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNE")
  NF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNF")
  NG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNG")
  NI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNI")
  NL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNL")
  NO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNO")
  NP @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNP")
  NR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNR")
  NU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNU")
  NZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNZ")
  OM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeOM")
  PA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePA")
  PE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePE")
  PF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePF")
  PG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePG")
  PH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePH")
  PK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePK")
  PL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePL")
  PM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePM")
  PN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePN")
  PR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePR")
  PS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePS")
  PT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePT")
  PW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePW")
  PY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePY")
  QA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeQA")
  RE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeRE")
  RO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeRO")
  RS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeRS")
  RU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeRU")
  RW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeRW")
  SA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSA")
  SB @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSB")
  SC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSC")
  SD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSD")
  SE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSE")
  SG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSG")
  SH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSH")
  SI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSI")
  SJ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSJ")
  SK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSK")
  SL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSL")
  SM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSM")
  SN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSN")
  SO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSO")
  SR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSR")
  SS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSS")
  ST @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeST")
  SV @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSV")
  SX @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSX")
  SY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSY")
  SZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSZ")
  TC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTC")
  TD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTD")
  TF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTF")
  TG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTG")
  TH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTH")
  TJ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTJ")
  TK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTK")
  TL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTL")
  TM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTM")
  TN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTN")
  TO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTO")
  TR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTR")
  TT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTT")
  TV @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTV")
  TW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTW")
  TZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTZ")
  UA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeUA")
  UG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeUG")
  UM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeUM")
  US @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeUS")
  UY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeUY")
  UZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeUZ")
  VA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVA")
  VC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVC")
  VE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVE")
  VG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVG")
  VI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVI")
  VN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVN")
  VU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVU")
  WF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeWF")
  WS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeWS")
  YE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeYE")
  YT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeYT")
  ZA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeZA")
  ZM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeZM")
  ZW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeZW")
}

enum VendorCategory
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.VendorCategory") {
  ANALYTICS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryAnalytics"
    )
  CLOUD_MONITORING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryCloudMonitoring"
    )
  CLOUD_PROVIDER
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryCloudProvider"
    )
  COLLABORATION
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryCollaboration"
    )
  CUSTOMER_SUPPORT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryCustomerSupport"
    )
  DATA_STORAGE_AND_PROCESSING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryDataStorageAndProcessing"
    )
  DOCUMENT_MANAGEMENT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryDocumentManagement"
    )
  EMPLOYEE_MANAGEMENT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryEmployeeManagement"
    )
  ENGINEERING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryEngineering"
    )
  FINANCE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryFinance"
    )
  IDENTITY_PROVIDER
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryIdentityProvider"
    )
  IT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryIT")
  MARKETING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryMarketing"
    )
  OFFICE_OPERATIONS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryOfficeOperations"
    )
  OTHER
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryOther")
  PASSWORD_MANAGEMENT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryPasswordManagement"
    )
  PRODUCT_AND_DESIGN
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryProductAndDesign"
    )
  PROFESSIONAL_SERVICES
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryProfessionalServices"
    )
  RECRUITING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryRecruiting"
    )
  SALES
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.VendorCategorySales")
  SECURITY
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategorySecurity"
    )
  VERSION_CONTROL
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryVersionControl"
    )
}

type Vendor implements Node {
  id: ID!
  name: String!
  category: VendorCategory!
  websiteUrl: String
  privacyPolicyUrl: String
  countries: [CountryCode!]!
}

type VendorConnection {
  edges: [VendorEdge!]!
  pageInfo: PageInfo!
}

type VendorEdge {
  cursor: CursorKey!
  node: Vendor!
}

type TrustCenterReference implements Node {
  id: ID!
  name: String!
  description: String!
  websiteUrl: String!
  logoUrl: String! @goField(forceResolver: true)
}

type TrustCenterReferenceConnection {
  edges: [TrustCenterReferenceEdge!]!
  pageInfo: PageInfo!
}

type TrustCenterReferenceEdge {
  cursor: CursorKey!
  node: TrustCenterReference!
}

type TrustCenter implements Node {
  id: ID!
  active: Boolean!
  slug: String!
  ndaFileName: String
  ndaFileUrl: String @goField(forceResolver: true)
  organization: Organization! @goField(forceResolver: true)
  isUserAuthenticated: Boolean! @goField(forceResolver: true)
  hasAcceptedNonDisclosureAgreement: Boolean! @goField(forceResolver: true)

  documents(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
  ): DocumentConnection! @goField(forceResolver: true)

  audits(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
  ): AuditConnection! @goField(forceResolver: true)

  vendors(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
  ): VendorConnection! @goField(forceResolver: true)

  references(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
  ): TrustCenterReferenceConnection! @goField(forceResolver: true)
}

type TrustCenterAccess implements Node {
  id: ID!
  email: String!
  name: String!
  createdAt: Datetime!
  updatedAt: Datetime!
}

input RequestAllAccessesInput {
  trustCenterId: ID!
  email: String
  name: String
}

type RequestAccessesPayload {
  trustCenterAccess: TrustCenterAccess!
}

input ExportDocumentPDFInput {
  documentId: ID!
}

input ExportReportPDFInput {
  reportId: ID!
}

input AcceptNonDisclosureAgreementInput {
  trustCenterId: ID!
}

input RequestDocumentAccessInput {
  trustCenterId: ID!
  documentId: ID!
  email: String
  name: String
}

input RequestReportAccessInput {
  trustCenterId: ID!
  reportId: ID!
  email: String
  name: String
}

type ExportDocumentPDFPayload {
  data: String!
}

type ExportReportPDFPayload {
  data: String!
}

type AcceptNonDisclosureAgreementPayload {
  success: Boolean!
}

type Query {
  node(id: ID!): Node!
  trustCenterBySlug(slug: String!): TrustCenter @mustBeAuthenticated(role: NONE)
}

type Mutation {
  requestAllAccesses(
    input: RequestAllAccessesInput!
  ): RequestAccessesPayload! @mustBeAuthenticated(role: NONE)

  exportDocumentPDF(
    input: ExportDocumentPDFInput!
  ): ExportDocumentPDFPayload! @mustBeAuthenticated(role: NONE)

  exportReportPDF(
    input: ExportReportPDFInput!
  ): ExportReportPDFPayload! @mustBeAuthenticated(role: NONE)

  acceptNonDisclosureAgreement(
    input: AcceptNonDisclosureAgreementInput!
  ): AcceptNonDisclosureAgreementPayload! @mustBeAuthenticated(role: USER)

  requestDocumentAccess(
    input: RequestDocumentAccessInput!
  ): RequestAccessesPayload! @mustBeAuthenticated(role: NONE)

  requestReportAccess(
    input: RequestReportAccessInput!
  ): RequestAccessesPayload! @mustBeAuthenticated(role: NONE)
}
