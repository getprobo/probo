# Directives
directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goEnum(value: String) on ENUM_VALUE

# Scalars
scalar CursorKey
scalar Void
scalar Datetime
scalar Upload
scalar Duration
scalar BigInt

# Interfaces
interface Node {
  id: ID!
}

# Pagination
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: CursorKey
  endCursor: CursorKey
}

# Enums
enum OrderDirection
  @goModel(model: "github.com/getprobo/probo/pkg/page.OrderDirection") {
  ASC @goEnum(value: "github.com/getprobo/probo/pkg/page.OrderDirectionAsc")
  DESC @goEnum(value: "github.com/getprobo/probo/pkg/page.OrderDirectionDesc")
}

enum MeasureState
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.MeasureState") {
  NOT_STARTED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MeasureStateNotStarted"
    )
  IN_PROGRESS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MeasureStateInProgress"
    )
  NOT_APPLICABLE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MeasureStateNotApplicable"
    )
  IMPLEMENTED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MeasureStateImplemented"
    )
}

enum TaskState
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.TaskState") {
  TODO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.TaskStateTodo")
  DONE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.TaskStateDone")
}

enum EvidenceState
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.EvidenceState") {
  FULFILLED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.EvidenceStateFulfilled"
    )
  REQUESTED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.EvidenceStateRequested"
    )
}

enum PeopleKind
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.PeopleKind") {
  EMPLOYEE
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.PeopleKindEmployee")
  CONTRACTOR
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.PeopleKindContractor"
    )
  SERVICE_ACCOUNT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.PeopleKindServiceAccount"
    )
}

enum DocumentStatus
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.DocumentStatus") {
  DRAFT
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.DocumentStatusDraft")
  PUBLISHED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DocumentStatusPublished"
    )
}

enum EvidenceType
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.EvidenceType") {
  FILE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.EvidenceTypeFile")
  LINK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.EvidenceTypeLink")
}

enum RiskTreatment
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.RiskTreatment") {
  MITIGATED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.RiskTreatmentMitigated"
    )
  ACCEPTED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.RiskTreatmentAccepted"
    )
  AVOIDED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.RiskTreatmentAvoided"
    )
  TRANSFERRED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.RiskTreatmentTransferred"
    )
}

enum AuditState
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.AuditState") {
  NOT_STARTED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.AuditStateNotStarted"
    )
  IN_PROGRESS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.AuditStateInProgress"
    )
  COMPLETED
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.AuditStateCompleted")
  REJECTED
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.AuditStateRejected")
  OUTDATED
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.AuditStateOutdated")
}

enum TrustCenterVisibility
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.TrustCenterVisibility") {
  NONE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.TrustCenterVisibilityNone"
    )
  PRIVATE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.TrustCenterVisibilityPrivate"
    )
  PUBLIC
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.TrustCenterVisibilityPublic"
    )
}

enum NonconformityStatus
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.NonconformityStatus"
  ) {
  OPEN
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.NonconformityStatusOpen"
    )
  IN_PROGRESS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.NonconformityStatusInProgress"
    )
  CLOSED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.NonconformityStatusClosed"
    )
}

enum ObligationStatus
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.ObligationStatus") {
  NON_COMPLIANT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ObligationStatusNonCompliant"
    )
  PARTIALLY_COMPLIANT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ObligationStatusPartiallyCompliant"
    )
  COMPLIANT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ObligationStatusCompliant"
    )
}

enum ContinualImprovementStatus
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementStatus"
  ) {
  OPEN
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementStatusOpen"
    )
  IN_PROGRESS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementStatusInProgress"
    )
  CLOSED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementStatusClosed"
    )
}

enum ContinualImprovementPriority
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementPriority"
  ) {
  LOW
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementPriorityLow"
    )
  MEDIUM
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementPriorityMedium"
    )
  HIGH
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementPriorityHigh"
    )
}

enum ProcessingActivitySpecialOrCriminalData
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.ProcessingActivitySpecialOrCriminalData"
  ) {
  YES
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivitySpecialOrCriminalDataYes"
    )
  NO
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivitySpecialOrCriminalDataNo"
    )
  POSSIBLE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivitySpecialOrCriminalDataPossible"
    )
}

enum ProcessingActivityLawfulBasis
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityLawfulBasis"
  ) {
  LEGITIMATE_INTEREST
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityLawfulBasisLegitimateInterest"
    )
  CONSENT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityLawfulBasisConsent"
    )
  CONTRACTUAL_NECESSITY
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityLawfulBasisContractualNecessity"
    )
  LEGAL_OBLIGATION
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityLawfulBasisLegalObligation"
    )
  VITAL_INTERESTS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityLawfulBasisVitalInterests"
    )
  PUBLIC_TASK
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityLawfulBasisPublicTask"
    )
}

enum ProcessingActivityTransferSafeguards
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityTransferSafeguards"
  ) {
  STANDARD_CONTRACTUAL_CLAUSES
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityTransferSafeguardsStandardContractualClauses"
    )
  BINDING_CORPORATE_RULES
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityTransferSafeguardsBindingCorporateRules"
    )
  ADEQUACY_DECISION
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityTransferSafeguardsAdequacyDecision"
    )
  DEROGATIONS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityTransferSafeguardsDerogations"
    )
  CODES_OF_CONDUCT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityTransferSafeguardsCodesOfConduct"
    )
  CERTIFICATION_MECHANISMS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityTransferSafeguardsCertificationMechanisms"
    )
}

enum ProcessingActivityDataProtectionImpactAssessment
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityDataProtectionImpactAssessment"
  ) {
  NEEDED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityDataProtectionImpactAssessmentNeeded"
    )
  NOT_NEEDED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityDataProtectionImpactAssessmentNotNeeded"
    )
}

enum ProcessingActivityTransferImpactAssessment
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityTransferImpactAssessment"
  ) {
  NEEDED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityTransferImpactAssessmentNeeded"
    )
  NOT_NEEDED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityTransferImpactAssessmentNotNeeded"
    )
}

# Order Field Enums
enum UserOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.UserOrderField") {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.UserOrderFieldCreatedAt"
    )
}

enum PeopleOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.PeopleOrderField") {
  FULL_NAME
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.PeopleOrderFieldFullName"
    )
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.PeopleOrderFieldCreatedAt"
    )
  KIND
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.PeopleOrderFieldKind"
    )
}

enum VendorOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.VendorOrderField") {
  NAME
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorOrderFieldName"
    )
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorOrderFieldCreatedAt"
    )
  UPDATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorOrderFieldUpdatedAt"
    )
}

enum FrameworkOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.FrameworkOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.FrameworkOrderFieldCreatedAt"
    )
}

enum ControlOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.ControlOrderField") {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ControlOrderFieldCreatedAt"
    )
  SECTION_TITLE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ControlOrderFieldSectionTitle"
    )
}

enum MeasureOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.MeasureOrderField") {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MeasureOrderFieldCreatedAt"
    )
  NAME
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MeasureOrderFieldName"
    )
}

enum TaskOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.TaskOrderField") {
  CREATED_AT
}

enum DocumentOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.DocumentOrderField") {
  TITLE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DocumentOrderFieldTitle"
    )
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DocumentOrderFieldCreatedAt"
    )
  DOCUMENT_TYPE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DocumentOrderFieldDocumentType"
    )
}

enum RiskOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.RiskOrderField") {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.RiskOrderFieldCreatedAt"
    )
  UPDATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.RiskOrderFieldUpdatedAt"
    )
  NAME
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.RiskOrderFieldName")
  CATEGORY
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.RiskOrderFieldCategory"
    )
  TREATMENT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.RiskOrderFieldTreatment"
    )
  INHERENT_RISK_SCORE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.RiskOrderFieldInherentRiskScore"
    )
  RESIDUAL_RISK_SCORE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.RiskOrderFieldResidualRiskScore"
    )
  OWNER_FULL_NAME
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.RiskOrderFieldOwnerFullName"
    )
}

enum EvidenceOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.EvidenceOrderField") {
  CREATED_AT
}

enum VendorComplianceReportOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.VendorComplianceReportOrderField"
  ) {
  REPORT_DATE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorComplianceReportOrderFieldReportDate"
    )
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorComplianceReportOrderFieldCreatedAt"
    )
}

enum VendorContactOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.VendorContactOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorContactOrderFieldCreatedAt"
    )
  FULL_NAME
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorContactOrderFieldFullName"
    )
  EMAIL
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorContactOrderFieldEmail"
    )
}

enum VendorServiceOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.VendorServiceOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorServiceOrderFieldCreatedAt"
    )
  NAME
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorServiceOrderFieldName"
    )
}

enum OrganizationOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.OrganizationOrderField"
  ) {
  NAME
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.OrganizationOrderFieldName"
    )
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.OrganizationOrderFieldCreatedAt"
    )
  UPDATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.OrganizationOrderFieldUpdatedAt"
    )
}

enum ConnectorOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.ConnectorOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ConnectorOrderFieldCreatedAt"
    )
  NAME
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ConnectorOrderFieldName"
    )
}

enum DataSensitivity
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.DataSensitivity") {
  NONE
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.DataSensitivityNone")
  LOW
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.DataSensitivityLow")
  MEDIUM
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DataSensitivityMedium"
    )
  HIGH
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.DataSensitivityHigh")
  CRITICAL
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DataSensitivityCritical"
    )
}

enum BusinessImpact
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.BusinessImpact") {
  LOW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.BusinessImpactLow")
  MEDIUM
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.BusinessImpactMedium"
    )
  HIGH
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.BusinessImpactHigh")
  CRITICAL
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.BusinessImpactCritical"
    )
}

enum DocumentVersionOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.DocumentVersionOrderField"
  ) {
  VERSION
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DocumentVersionOrderFieldVersion"
    )
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DocumentVersionOrderFieldCreatedAt"
    )
}

enum CountryCode
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.CountryCode") {
  AD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAD")
  AE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAE")
  AF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAF")
  AG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAG")
  AI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAI")
  AL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAL")
  AM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAM")
  AO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAO")
  AQ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAQ")
  AR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAR")
  AS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAS")
  AT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAT")
  AU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAU")
  AW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAW")
  AX @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAX")
  AZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeAZ")
  BA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBA")
  BB @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBB")
  BD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBD")
  BE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBE")
  BF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBF")
  BG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBG")
  BH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBH")
  BI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBI")
  BJ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBJ")
  BL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBL")
  BM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBM")
  BN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBN")
  BO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBO")
  BQ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBQ")
  BR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBR")
  BS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBS")
  BT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBT")
  BV @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBV")
  BW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBW")
  BY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBY")
  BZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeBZ")
  CA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCA")
  CC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCC")
  CD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCD")
  CF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCF")
  CG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCG")
  CH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCH")
  CI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCI")
  CK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCK")
  CL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCL")
  CM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCM")
  CN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCN")
  CO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCO")
  CR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCR")
  CU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCU")
  CV @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCV")
  CW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCW")
  CX @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCX")
  CY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCY")
  CZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeCZ")
  DE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeDE")
  DJ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeDJ")
  DK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeDK")
  DM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeDM")
  DO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeDO")
  DZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeDZ")
  EC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeEC")
  EE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeEE")
  EG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeEG")
  EH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeEH")
  ER @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeER")
  ES @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeES")
  ET @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeET")
  FI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeFI")
  FJ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeFJ")
  FK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeFK")
  FM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeFM")
  FO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeFO")
  FR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeFR")
  GA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGA")
  GB @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGB")
  GD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGD")
  GE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGE")
  GF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGF")
  GG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGG")
  GH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGH")
  GI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGI")
  GL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGL")
  GM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGM")
  GN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGN")
  GP @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGP")
  GQ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGQ")
  GR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGR")
  GT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGT")
  GU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGU")
  GW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGW")
  GY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeGY")
  HK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeHK")
  HM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeHM")
  HN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeHN")
  HR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeHR")
  HT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeHT")
  HU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeHU")
  ID @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeID")
  IE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIE")
  IL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIL")
  IM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIM")
  IN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIN")
  IO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIO")
  IQ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIQ")
  IR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIR")
  IS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIS")
  IT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeIT")
  JE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeJE")
  JM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeJM")
  JO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeJO")
  JP @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeJP")
  KE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKE")
  KG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKG")
  KH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKH")
  KI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKI")
  KM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKM")
  KN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKN")
  KP @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKP")
  KR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKR")
  KW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKW")
  KY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKY")
  KZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeKZ")
  LA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLA")
  LB @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLB")
  LC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLC")
  LI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLI")
  LK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLK")
  LR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLR")
  LS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLS")
  LT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLT")
  LU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLU")
  LV @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLV")
  LY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeLY")
  MA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMA")
  MC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMC")
  MD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMD")
  ME @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeME")
  MF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMF")
  MG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMG")
  MH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMH")
  MK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMK")
  ML @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeML")
  MM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMM")
  MN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMN")
  MO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMO")
  MP @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMP")
  MQ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMQ")
  MR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMR")
  MS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMS")
  MT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMT")
  MU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMU")
  MV @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMV")
  MW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMW")
  MX @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMX")
  MY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMY")
  MZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeMZ")
  NA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNA")
  NC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNC")
  NE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNE")
  NF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNF")
  NG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNG")
  NI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNI")
  NL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNL")
  NO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNO")
  NP @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNP")
  NR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNR")
  NU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNU")
  NZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeNZ")
  OM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeOM")
  PA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePA")
  PE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePE")
  PF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePF")
  PG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePG")
  PH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePH")
  PK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePK")
  PL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePL")
  PM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePM")
  PN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePN")
  PR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePR")
  PS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePS")
  PT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePT")
  PW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePW")
  PY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodePY")
  QA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeQA")
  RE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeRE")
  RO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeRO")
  RS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeRS")
  RU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeRU")
  RW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeRW")
  SA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSA")
  SB @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSB")
  SC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSC")
  SD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSD")
  SE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSE")
  SG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSG")
  SH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSH")
  SI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSI")
  SJ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSJ")
  SK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSK")
  SL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSL")
  SM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSM")
  SN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSN")
  SO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSO")
  SR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSR")
  SS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSS")
  ST @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeST")
  SV @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSV")
  SX @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSX")
  SY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSY")
  SZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeSZ")
  TC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTC")
  TD @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTD")
  TF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTF")
  TG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTG")
  TH @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTH")
  TJ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTJ")
  TK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTK")
  TL @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTL")
  TM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTM")
  TN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTN")
  TO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTO")
  TR @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTR")
  TT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTT")
  TV @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTV")
  TW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTW")
  TZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeTZ")
  UA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeUA")
  UG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeUG")
  UM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeUM")
  US @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeUS")
  UY @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeUY")
  UZ @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeUZ")
  VA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVA")
  VC @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVC")
  VE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVE")
  VG @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVG")
  VI @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVI")
  VN @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVN")
  VU @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeVU")
  WF @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeWF")
  WS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeWS")
  YE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeYE")
  YT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeYT")
  ZA @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeZA")
  ZM @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeZM")
  ZW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CountryCodeZW")
}

enum VendorCategory
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.VendorCategory") {
  ANALYTICS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryAnalytics"
    )
  CLOUD_MONITORING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryCloudMonitoring"
    )
  CLOUD_PROVIDER
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryCloudProvider"
    )
  COLLABORATION
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryCollaboration"
    )
  CUSTOMER_SUPPORT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryCustomerSupport"
    )
  DATA_STORAGE_AND_PROCESSING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryDataStorageAndProcessing"
    )
  DOCUMENT_MANAGEMENT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryDocumentManagement"
    )
  EMPLOYEE_MANAGEMENT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryEmployeeManagement"
    )
  ENGINEERING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryEngineering"
    )
  FINANCE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryFinance"
    )
  IDENTITY_PROVIDER
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryIdentityProvider"
    )
  IT @goEnum(value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryIT")
  MARKETING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryMarketing"
    )
  OFFICE_OPERATIONS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryOfficeOperations"
    )
  OTHER
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryOther")
  PASSWORD_MANAGEMENT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryPasswordManagement"
    )
  PRODUCT_AND_DESIGN
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryProductAndDesign"
    )
  PROFESSIONAL_SERVICES
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryProfessionalServices"
    )
  RECRUITING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryRecruiting"
    )
  SALES
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.VendorCategorySales")
  SECURITY
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategorySecurity"
    )
  VERSION_CONTROL
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorCategoryVersionControl"
    )
}

enum DocumentType
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.DocumentType") {
  OTHER
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.DocumentTypeOther")
  ISMS @goEnum(value: "github.com/getprobo/probo/pkg/coredata.DocumentTypeISMS")
  POLICY
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.DocumentTypePolicy")
}

enum AssetType
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.AssetType") {
  PHYSICAL
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.AssetTypePhysical")
  VIRTUAL
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.AssetTypeVirtual")
}

enum CriticityLevel
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.CriticityLevel") {
  LOW @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CriticityLevelLow")
  MEDIUM
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.CriticityLevelMedium"
    )
  HIGH
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.CriticityLevelHigh")
}

enum AssetOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.AssetOrderField") {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.AssetOrderFieldCreatedAt"
    )
  AMOUNT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.AssetOrderFieldAmount"
    )
  CRITICITY
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.AssetOrderFieldCriticity"
    )
}

enum DatumOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.DatumOrderField") {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DatumOrderFieldCreatedAt"
    )
  NAME
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.DatumOrderFieldName")
  DATA_CLASSIFICATION
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DatumOrderFieldDataClassification"
    )
}

enum DataClassification
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.DataClassification") {
  PUBLIC
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DataClassificationPublic"
    )
  INTERNAL
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DataClassificationInternal"
    )
  CONFIDENTIAL
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DataClassificationConfidential"
    )
  SECRET
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DataClassificationSecret"
    )
}

enum ControlStatus
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.ControlStatus") {
  INCLUDED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ControlStatusIncluded"
    )
  EXCLUDED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ControlStatusExcluded"
    )
}

enum AuditOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.AuditOrderField") {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.AuditOrderFieldCreatedAt"
    )
  VALID_FROM
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.AuditOrderFieldValidFrom"
    )
  VALID_UNTIL
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.AuditOrderFieldValidUntil"
    )
  STATE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.AuditOrderFieldState"
    )
}

enum NonconformityOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.NonconformityOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.NonconformityOrderFieldCreatedAt"
    )
  REFERENCE_ID
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.NonconformityOrderFieldReferenceId"
    )
  DATE_IDENTIFIED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.NonconformityOrderFieldDateIdentified"
    )
  DUE_DATE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.NonconformityOrderFieldDueDate"
    )
  STATUS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.NonconformityOrderFieldStatus"
    )
}

enum ObligationOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.ObligationOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ObligationOrderFieldCreatedAt"
    )
  LAST_REVIEW_DATE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ObligationOrderFieldLastReviewDate"
    )
  DUE_DATE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ObligationOrderFieldDueDate"
    )
  STATUS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ObligationOrderFieldStatus"
    )
}

enum ContinualImprovementOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementOrderFieldCreatedAt"
    )
  REFERENCE_ID
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementOrderFieldReferenceId"
    )
  TARGET_DATE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementOrderFieldTargetDate"
    )
  STATUS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementOrderFieldStatus"
    )
  PRIORITY
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ContinualImprovementOrderFieldPriority"
    )
}

enum ProcessingActivityOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityOrderFieldCreatedAt"
    )
  NAME
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ProcessingActivityOrderFieldName"
    )
}

enum TrustCenterAccessOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.TrustCenterAccessOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.TrustCenterAccessOrderFieldCreatedAt"
    )
}

enum TrustCenterDocumentAccessOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.TrustCenterDocumentAccessOrderField") {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.TrustCenterDocumentAccessOrderFieldCreatedAt"
    )
}

enum TrustCenterReferenceOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.TrustCenterReferenceOrderField"
  ) {
  NAME
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.TrustCenterReferenceOrderFieldName"
    )
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.TrustCenterReferenceOrderFieldCreatedAt"
    )
  UPDATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.TrustCenterReferenceOrderFieldUpdatedAt"
    )
}

enum SnapshotsType
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.SnapshotsType") {
  RISKS
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.SnapshotsTypeRisks")
  VENDORS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.SnapshotsTypeVendors"
    )
  ASSETS
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.SnapshotsTypeAssets")
  DATA
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.SnapshotsTypeData")
  NONCONFORMITIES
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.SnapshotsTypeNonconformities"
    )
  OBLIGATIONS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.SnapshotsTypeObligations"
    )
  CONTINUAL_IMPROVEMENTS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.SnapshotsTypeContinualImprovements"
    )
  PROCESSING_ACTIVITIES
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.SnapshotsTypeProcessingActivities"
    )
}

enum SnapshotOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.SnapshotOrderField") {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.SnapshotOrderFieldCreatedAt"
    )
  NAME
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.SnapshotOrderFieldName"
    )
  TYPE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.SnapshotOrderFieldType"
    )
}

# Input Types
input UserOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.UserOrderBy"
  ) {
  direction: OrderDirection!
  field: UserOrderField!
}

input PeopleOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.PeopleOrderBy"
  ) {
  direction: OrderDirection!
  field: PeopleOrderField!
}

input VendorOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.VendorOrderBy"
  ) {
  direction: OrderDirection!
  field: VendorOrderField!
}

input FrameworkOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.FrameworkOrderBy"
  ) {
  direction: OrderDirection!
  field: FrameworkOrderField!
}

input ControlOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.ControlOrderBy"
  ) {
  direction: OrderDirection!
  field: ControlOrderField!
}

input MeasureOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.MeasureOrderBy"
  ) {
  direction: OrderDirection!
  field: MeasureOrderField!
}

input TaskOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.TaskOrderBy"
  ) {
  direction: OrderDirection!
  field: TaskOrderField!
}

input DocumentOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.DocumentOrderBy"
  ) {
  direction: OrderDirection!
  field: DocumentOrderField!
}

input RiskOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.RiskOrderBy"
  ) {
  direction: OrderDirection!
  field: RiskOrderField!
}

input AuditOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.AuditOrderBy"
  ) {
  direction: OrderDirection!
  field: AuditOrderField!
}

input NonconformityOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.NonconformityOrderBy"
  ) {
  direction: OrderDirection!
  field: NonconformityOrderField!
}

input ObligationOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.ObligationOrderBy"
  ) {
  direction: OrderDirection!
  field: ObligationOrderField!
}

input ContinualImprovementOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.ContinualImprovementOrderBy"
  ) {
  direction: OrderDirection!
  field: ContinualImprovementOrderField!
}

input ProcessingActivityOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.ProcessingActivityOrderBy"
  ) {
  direction: OrderDirection!
  field: ProcessingActivityOrderField!
}

input TrustCenterAccessOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.TrustCenterAccessOrderBy"
  ) {
  direction: OrderDirection!
  field: TrustCenterAccessOrderField!
}

input TrustCenterDocumentAccessOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.TrustCenterDocumentAccessOrderBy"
  ) {
  direction: OrderDirection!
  field: TrustCenterDocumentAccessOrderField!
}

input TrustCenterReferenceOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.TrustCenterReferenceOrderBy"
  ) {
  direction: OrderDirection!
  field: TrustCenterReferenceOrderField!
}

input EvidenceOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.EvidenceOrderBy"
  ) {
  direction: OrderDirection!
  field: EvidenceOrderField!
}

input VendorComplianceReportOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.VendorComplianceReportOrderBy"
  ) {
  direction: OrderDirection!
  field: VendorComplianceReportOrderField!
}

input VendorContactOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.VendorContactOrderBy"
  ) {
  direction: OrderDirection!
  field: VendorContactOrderField!
}

input VendorServiceOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.VendorServiceOrderBy"
  ) {
  direction: OrderDirection!
  field: VendorServiceOrderField!
}

input OrganizationOrder {
  direction: OrderDirection!
  field: OrganizationOrderField!
}

input ConnectorOrder {
  field: ConnectorOrderField!
  direction: OrderDirection!
}

input DocumentVersionOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.DocumentVersionOrderBy"
  ) {
  direction: OrderDirection!
  field: DocumentVersionOrderField!
}

input SnapshotOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.SnapshotOrderBy"
  ) {
  direction: OrderDirection!
  field: SnapshotOrderField!
}

input DocumentVersionFilter {
  status: DocumentStatus
}

# Input Types for Filtering
input ControlFilter {
  query: String
}

input DocumentFilter {
  query: String
}

input MeasureFilter {
  query: String
  state: MeasureState
}

input RiskFilter {
  query: String
  snapshotId: ID
}

input PeopleFilter {
  excludeContractEnded: Boolean
}

input OrganizationFilter {
  trustCenterSlug: String
}

input DatumFilter {
  snapshotId: ID
}

input NonconformityFilter {
  snapshotId: ID
}

input ObligationFilter {
  snapshotId: ID
}

input ContinualImprovementFilter {
  snapshotId: ID
}

input ProcessingActivityFilter {
  snapshotId: ID
}

input AssetFilter {
  snapshotId: ID
}

input VendorFilter {
  snapshotId: ID
}

# Core Types
type TrustCenter implements Node {
  id: ID!
  active: Boolean!
  slug: String!
  ndaFileName: String
  ndaFileUrl: String @goField(forceResolver: true)
  createdAt: Datetime!
  updatedAt: Datetime!
  organization: Organization! @goField(forceResolver: true)

  accesses(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: TrustCenterAccessOrder
  ): TrustCenterAccessConnection! @goField(forceResolver: true)

  references(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: TrustCenterReferenceOrder
  ): TrustCenterReferenceConnection! @goField(forceResolver: true)
}

type Organization implements Node {
  id: ID!
  name: String!
  logoUrl: String @goField(forceResolver: true)

  description: String
  websiteUrl: String
  email: String
  headquarterAddress: String

  users(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: UserOrder
  ): UserConnection! @goField(forceResolver: true)

  connectors(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ConnectorOrder
  ): ConnectorConnection! @goField(forceResolver: true)

  frameworks(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: FrameworkOrder
  ): FrameworkConnection! @goField(forceResolver: true)

  controls(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ControlOrder
    filter: ControlFilter
  ): ControlConnection! @goField(forceResolver: true)

  vendors(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: VendorOrder
    filter: VendorFilter = { snapshotId: null }
  ): VendorConnection! @goField(forceResolver: true)

  peoples(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: PeopleOrder
    filter: PeopleFilter
  ): PeopleConnection! @goField(forceResolver: true)

  documents(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: DocumentOrder
    filter: DocumentFilter
  ): DocumentConnection! @goField(forceResolver: true)

  measures(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: MeasureOrder
    filter: MeasureFilter
  ): MeasureConnection! @goField(forceResolver: true)

  risks(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: RiskOrder
    filter: RiskFilter = { snapshotId: null }
  ): RiskConnection! @goField(forceResolver: true)

  tasks(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: TaskOrder
  ): TaskConnection! @goField(forceResolver: true)

  assets(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: AssetOrder
    filter: AssetFilter = { snapshotId: null }
  ): AssetConnection! @goField(forceResolver: true)

  data(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: DatumOrder
    filter: DatumFilter = { snapshotId: null }
  ): DatumConnection! @goField(forceResolver: true)

  audits(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: AuditOrder
  ): AuditConnection! @goField(forceResolver: true)

  nonconformities(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: NonconformityOrder
    filter: NonconformityFilter = { snapshotId: null }
  ): NonconformityConnection! @goField(forceResolver: true)

  obligations(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ObligationOrder
    filter: ObligationFilter = { snapshotId: null }
  ): ObligationConnection! @goField(forceResolver: true)

  continualImprovements(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ContinualImprovementOrder
    filter: ContinualImprovementFilter = { snapshotId: null }
  ): ContinualImprovementConnection! @goField(forceResolver: true)

  processingActivities(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ProcessingActivityOrder
    filter: ProcessingActivityFilter = { snapshotId: null }
  ): ProcessingActivityConnection! @goField(forceResolver: true)

  snapshots(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: SnapshotOrder
  ): SnapshotConnection! @goField(forceResolver: true)

  trustCenter: TrustCenter @goField(forceResolver: true)

  customDomain: CustomDomain @goField(forceResolver: true)

  createdAt: Datetime!
  updatedAt: Datetime!
}

type User implements Node {
  id: ID!
  fullName: String!
  email: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  people(organizationId: ID!): People @goField(forceResolver: true)
}

type Connector implements Node {
  id: ID!
  name: String!
  type: String!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type People implements Node {
  id: ID!
  fullName: String!
  primaryEmailAddress: String!
  additionalEmailAddresses: [String!]!
  kind: PeopleKind!
  position: String
  contractStartDate: Datetime
  contractEndDate: Datetime
  createdAt: Datetime!
  updatedAt: Datetime!
}

type Vendor implements Node {
  id: ID!
  snapshotId: ID
  name: String!
  category: VendorCategory!
  description: String

  organization: Organization! @goField(forceResolver: true)

  complianceReports(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: VendorComplianceReportOrder
  ): VendorComplianceReportConnection! @goField(forceResolver: true)

  businessAssociateAgreement: VendorBusinessAssociateAgreement
    @goField(forceResolver: true)
  dataPrivacyAgreement: VendorDataPrivacyAgreement @goField(forceResolver: true)

  contacts(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: VendorContactOrder
  ): VendorContactConnection! @goField(forceResolver: true)

  services(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: VendorServiceOrder
  ): VendorServiceConnection! @goField(forceResolver: true)

  riskAssessments(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: VendorRiskAssessmentOrder
  ): VendorRiskAssessmentConnection! @goField(forceResolver: true)

  businessOwner: People @goField(forceResolver: true)
  securityOwner: People @goField(forceResolver: true)

  statusPageUrl: String
  termsOfServiceUrl: String
  privacyPolicyUrl: String
  serviceLevelAgreementUrl: String
  dataProcessingAgreementUrl: String
  businessAssociateAgreementUrl: String
  subprocessorsListUrl: String
  certifications: [String!]!
  countries: [CountryCode!]!
  securityPageUrl: String
  trustPageUrl: String
  headquarterAddress: String
  legalName: String
  websiteUrl: String
  showOnTrustCenter: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type VendorComplianceReport implements Node {
  id: ID!
  vendor: Vendor! @goField(forceResolver: true)
  reportDate: Datetime!
  validUntil: Datetime
  reportName: String!
  file: File @goField(forceResolver: true)
  createdAt: Datetime!
  updatedAt: Datetime!
}

type VendorBusinessAssociateAgreement implements Node {
  id: ID!
  vendor: Vendor! @goField(forceResolver: true)
  validFrom: Datetime
  validUntil: Datetime
  fileName: String!
  fileUrl: String! @goField(forceResolver: true)
  fileSize: BigInt!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type VendorContact implements Node {
  id: ID!
  vendor: Vendor! @goField(forceResolver: true)
  fullName: String
  email: String
  phone: String
  role: String
  createdAt: Datetime!
  updatedAt: Datetime!
}

type VendorService implements Node {
  id: ID!
  vendor: Vendor! @goField(forceResolver: true)
  name: String!
  description: String
  createdAt: Datetime!
  updatedAt: Datetime!
}

type VendorDataPrivacyAgreement implements Node {
  id: ID!
  vendor: Vendor! @goField(forceResolver: true)
  validFrom: Datetime
  validUntil: Datetime
  fileName: String!
  fileUrl: String! @goField(forceResolver: true)
  fileSize: BigInt!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type Framework implements Node {
  id: ID!
  name: String!
  description: String!

  organization: Organization! @goField(forceResolver: true)

  controls(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ControlOrder
    filter: ControlFilter
  ): ControlConnection! @goField(forceResolver: true)

  createdAt: Datetime!
  updatedAt: Datetime!
}

type Control implements Node {
  id: ID!
  sectionTitle: String!
  name: String!
  description: String!
  status: ControlStatus!
  exclusionJustification: String

  framework: Framework! @goField(forceResolver: true)

  measures(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: MeasureOrder
    filter: MeasureFilter
  ): MeasureConnection! @goField(forceResolver: true)

  documents(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: DocumentOrder
    filter: DocumentFilter
  ): DocumentConnection! @goField(forceResolver: true)

  audits(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: AuditOrder
  ): AuditConnection! @goField(forceResolver: true)

  snapshots(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: SnapshotOrder
  ): SnapshotConnection! @goField(forceResolver: true)

  createdAt: Datetime!
  updatedAt: Datetime!
}

type Measure implements Node {
  id: ID!
  category: String!
  name: String!
  description: String!
  state: MeasureState!

  evidences(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: EvidenceOrder
  ): EvidenceConnection! @goField(forceResolver: true)

  tasks(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: TaskOrder
  ): TaskConnection! @goField(forceResolver: true)

  risks(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: RiskOrder
    filter: RiskFilter
  ): RiskConnection! @goField(forceResolver: true)

  controls(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ControlOrder
    filter: ControlFilter
  ): ControlConnection! @goField(forceResolver: true)

  createdAt: Datetime!
  updatedAt: Datetime!
}

type Task implements Node {
  id: ID!
  name: String!
  description: String!
  state: TaskState!
  timeEstimate: Duration
  deadline: Datetime
  assignedTo: People @goField(forceResolver: true)

  organization: Organization! @goField(forceResolver: true)
  measure: Measure @goField(forceResolver: true)

  evidences(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: EvidenceOrder
  ): EvidenceConnection! @goField(forceResolver: true)

  createdAt: Datetime!
  updatedAt: Datetime!
}

type Evidence implements Node {
  id: ID!
  size: Int!
  state: EvidenceState!
  type: EvidenceType!
  file: File @goField(forceResolver: true)
  url: String
  description: String!

  task: Task @goField(forceResolver: true)
  measure: Measure! @goField(forceResolver: true)

  createdAt: Datetime!
  updatedAt: Datetime!
}

type Document implements Node {
  id: ID!
  title: String!
  description: String!
  documentType: DocumentType!
  currentPublishedVersion: Int
  trustCenterVisibility: TrustCenterVisibility!
  owner: People! @goField(forceResolver: true)
  organization: Organization! @goField(forceResolver: true)

  versions(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: DocumentVersionOrder
    filter: DocumentVersionFilter
  ): DocumentVersionConnection! @goField(forceResolver: true)

  controls(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ControlOrder
    filter: ControlFilter
  ): ControlConnection! @goField(forceResolver: true)

  createdAt: Datetime!
  updatedAt: Datetime!
}

type Risk implements Node {
  id: ID!
  snapshotId: ID
  name: String!
  description: String!
  category: String!
  treatment: RiskTreatment!
  inherentLikelihood: Int!
  inherentImpact: Int!
  inherentRiskScore: Int!
  residualLikelihood: Int!
  residualImpact: Int!
  residualRiskScore: Int!
  note: String!

  owner: People @goField(forceResolver: true)
  organization: Organization! @goField(forceResolver: true)

  measures(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: MeasureOrder
    filter: MeasureFilter
  ): MeasureConnection! @goField(forceResolver: true)

  documents(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: DocumentOrder
    filter: DocumentFilter
  ): DocumentConnection! @goField(forceResolver: true)

  controls(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ControlOrder
    filter: ControlFilter
  ): ControlConnection! @goField(forceResolver: true)

  obligations(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ObligationOrder
    filter: ObligationFilter
  ): ObligationConnection! @goField(forceResolver: true)

  createdAt: Datetime!
  updatedAt: Datetime!
}

type Audit implements Node {
  id: ID!
  name: String
  organization: Organization! @goField(forceResolver: true)
  framework: Framework! @goField(forceResolver: true)
  validFrom: Datetime
  validUntil: Datetime
  report: Report @goField(forceResolver: true)
  reportUrl: String @goField(forceResolver: true)
  state: AuditState!

  controls(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ControlOrder
    filter: ControlFilter
  ): ControlConnection! @goField(forceResolver: true)

  trustCenterVisibility: TrustCenterVisibility!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type Nonconformity implements Node {
  id: ID!
  snapshotId: ID
  organization: Organization! @goField(forceResolver: true)
  referenceId: String!
  description: String
  audit: Audit! @goField(forceResolver: true)
  dateIdentified: Datetime
  rootCause: String!
  correctiveAction: String
  owner: People! @goField(forceResolver: true)
  dueDate: Datetime
  status: NonconformityStatus!
  effectivenessCheck: String
  createdAt: Datetime!
  updatedAt: Datetime!
}

type Obligation implements Node {
  id: ID!
  snapshotId: ID
  sourceId: ID
  organization: Organization! @goField(forceResolver: true)
  area: String
  source: String
  requirement: String
  actionsToBeImplemented: String
  regulator: String
  owner: People! @goField(forceResolver: true)
  lastReviewDate: Datetime
  dueDate: Datetime
  status: ObligationStatus!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type ContinualImprovement implements Node {
  id: ID!
  snapshotId: ID
  sourceId: ID
  organization: Organization! @goField(forceResolver: true)
  referenceId: String!
  description: String
  source: String
  owner: People! @goField(forceResolver: true)
  targetDate: Datetime
  status: ContinualImprovementStatus!
  priority: ContinualImprovementPriority!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type ProcessingActivity implements Node {
  id: ID!
  snapshotId: ID
  sourceId: ID
  organization: Organization! @goField(forceResolver: true)
  name: String!
  purpose: String
  dataSubjectCategory: String
  personalDataCategory: String
  specialOrCriminalData: ProcessingActivitySpecialOrCriminalData!
  consentEvidenceLink: String
  lawfulBasis: ProcessingActivityLawfulBasis!
  recipients: String
  location: String
  internationalTransfers: Boolean!
  transferSafeguards: ProcessingActivityTransferSafeguards
  retentionPeriod: String
  securityMeasures: String
  dataProtectionImpactAssessment: ProcessingActivityDataProtectionImpactAssessment!
  transferImpactAssessment: ProcessingActivityTransferImpactAssessment!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type Snapshot implements Node {
  id: ID!
  organization: Organization! @goField(forceResolver: true)
  name: String!
  description: String
  type: SnapshotsType!

  controls(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ControlOrder
    filter: ControlFilter
  ): ControlConnection! @goField(forceResolver: true)

  createdAt: Datetime!
}

type Report implements Node {
  id: ID!
  objectKey: String!
  mimeType: String!
  filename: String!
  size: Int!
  downloadUrl: String @goField(forceResolver: true)
  createdAt: Datetime!
  updatedAt: Datetime!
  audit: Audit @goField(forceResolver: true)
}

type Session {
  id: ID!
  expiresAt: Datetime!
}

type Viewer {
  id: ID!
  user: User!

  organizations(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: OrganizationOrder
    filter: OrganizationFilter
  ): OrganizationConnection! @goField(forceResolver: true)
}

# Connection Types
type OrganizationConnection {
  edges: [OrganizationEdge!]!
  pageInfo: PageInfo!
}

type OrganizationEdge {
  cursor: CursorKey!
  node: Organization!
}

type TrustCenterConnection {
  edges: [TrustCenterEdge!]!
  pageInfo: PageInfo!
}

type TrustCenterEdge {
  cursor: CursorKey!
  node: TrustCenter!
}

type TrustCenterAccess implements Node {
  id: ID!
  email: String!
  name: String!
  active: Boolean!
  hasAcceptedNonDisclosureAgreement: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!

  documentAccesses(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: TrustCenterDocumentAccessOrder
  ): TrustCenterDocumentAccessConnection! @goField(forceResolver: true)
}

type TrustCenterDocumentAccess implements Node {
  id: ID!
  active: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!
  trustCenterAccess: TrustCenterAccess! @goField(forceResolver: true)
  document: Document @goField(forceResolver: true)
  report: Report @goField(forceResolver: true)
}

type TrustCenterDocumentAccessConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.TrustCenterDocumentAccessConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [TrustCenterDocumentAccessEdge!]!
  pageInfo: PageInfo!
}

type TrustCenterDocumentAccessEdge {
  cursor: CursorKey!
  node: TrustCenterDocumentAccess!
}

type TrustCenterAccessConnection {
  edges: [TrustCenterAccessEdge!]!
  pageInfo: PageInfo!
}

type TrustCenterAccessEdge {
  cursor: CursorKey!
  node: TrustCenterAccess!
}

type TrustCenterReference implements Node {
  id: ID!
  name: String!
  description: String!
  websiteUrl: String!
  logoUrl: String! @goField(forceResolver: true)
  createdAt: Datetime!
  updatedAt: Datetime!
}

type TrustCenterReferenceConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.TrustCenterReferenceConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [TrustCenterReferenceEdge!]!
  pageInfo: PageInfo!
}

type TrustCenterReferenceEdge {
  cursor: CursorKey!
  node: TrustCenterReference!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: CursorKey!
  node: User!
}

type PeopleConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.PeopleConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [PeopleEdge!]!
  pageInfo: PageInfo!
}

type PeopleEdge {
  cursor: CursorKey!
  node: People!
}

type VendorConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.VendorConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [VendorEdge!]!
  pageInfo: PageInfo!
}

type VendorEdge {
  cursor: CursorKey!
  node: Vendor!
}

type FrameworkConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.FrameworkConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [FrameworkEdge!]!
  pageInfo: PageInfo!
}

type FrameworkEdge {
  cursor: CursorKey!
  node: Framework!
}

type ControlConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.ControlConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [ControlEdge!]!
  pageInfo: PageInfo!
}

type ControlEdge {
  cursor: CursorKey!
  node: Control!
}

type MeasureConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.MeasureConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [MeasureEdge!]!
  pageInfo: PageInfo!
}

type MeasureEdge {
  cursor: CursorKey!
  node: Measure!
}

type TaskConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.TaskConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge {
  cursor: CursorKey!
  node: Task!
}

type EvidenceConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.EvidenceConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [EvidenceEdge!]!
  pageInfo: PageInfo!
}

type EvidenceEdge {
  cursor: CursorKey!
  node: Evidence!
}

type DocumentConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.DocumentConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [DocumentEdge!]!
  pageInfo: PageInfo!
}

type DocumentEdge {
  cursor: CursorKey!
  node: Document!
}

type RiskConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.RiskConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [RiskEdge!]!
  pageInfo: PageInfo!
}

type RiskEdge {
  cursor: CursorKey!
  node: Risk!
}

type VendorComplianceReportConnection {
  edges: [VendorComplianceReportEdge!]!
  pageInfo: PageInfo!
}

type VendorComplianceReportEdge {
  cursor: CursorKey!
  node: VendorComplianceReport!
}

type VendorContactConnection {
  edges: [VendorContactEdge!]!
  pageInfo: PageInfo!
}

type VendorContactEdge {
  cursor: CursorKey!
  node: VendorContact!
}

type VendorServiceConnection {
  edges: [VendorServiceEdge!]!
  pageInfo: PageInfo!
}

type VendorServiceEdge {
  cursor: CursorKey!
  node: VendorService!
}

type ConnectorConnection {
  edges: [ConnectorEdge!]!
  pageInfo: PageInfo!
}

type ConnectorEdge {
  cursor: CursorKey!
  node: Connector!
}

type VendorRiskAssessmentConnection {
  edges: [VendorRiskAssessmentEdge!]!
  pageInfo: PageInfo!
}

type VendorRiskAssessmentEdge {
  cursor: CursorKey!
  node: VendorRiskAssessment!
}

type DocumentVersionConnection {
  edges: [DocumentVersionEdge!]!
  pageInfo: PageInfo!
}

type DocumentVersionEdge {
  cursor: CursorKey!
  node: DocumentVersion!
}

type DatumConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.DatumConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [DatumEdge!]!
  pageInfo: PageInfo!
}

type DatumEdge {
  cursor: CursorKey!
  node: Datum!
}

type AuditConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.AuditConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [AuditEdge!]!
  pageInfo: PageInfo!
}

type AuditEdge {
  cursor: CursorKey!
  node: Audit!
}

type NonconformityConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.NonconformityConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [NonconformityEdge!]!
  pageInfo: PageInfo!
}

type NonconformityEdge {
  cursor: CursorKey!
  node: Nonconformity!
}
type ObligationConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.ObligationConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [ObligationEdge!]!
  pageInfo: PageInfo!
}

type ObligationEdge {
  cursor: CursorKey!
  node: Obligation!
}

type ContinualImprovementConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.ContinualImprovementConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [ContinualImprovementEdge!]!
  pageInfo: PageInfo!
}

type ContinualImprovementEdge {
  cursor: CursorKey!
  node: ContinualImprovement!
}

type ProcessingActivityConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.ProcessingActivityConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [ProcessingActivityEdge!]!
  pageInfo: PageInfo!
}

type ProcessingActivityEdge {
  cursor: CursorKey!
  node: ProcessingActivity!
}

type SnapshotConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.SnapshotConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [SnapshotEdge!]!
  pageInfo: PageInfo!
}

type SnapshotEdge {
  cursor: CursorKey!
  node: Snapshot!
}

type File {
    id: ID!
    mimeType: String!
    fileName: String!
    size: BigInt!
    downloadUrl: String! @goField(forceResolver: true)
    createdAt: Datetime!
    updatedAt: Datetime!
}

# Root Types
type Query {
  node(id: ID!): Node!
  viewer: Viewer!
}

type Mutation {
  # Organization mutations
  createOrganization(
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload!
  updateOrganization(
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload!
  deleteOrganization(
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload!

  updateTrustCenter(input: UpdateTrustCenterInput!): UpdateTrustCenterPayload!

  uploadTrustCenterNDA(
    input: UploadTrustCenterNDAInput!
  ): UploadTrustCenterNDAPayload!

  deleteTrustCenterNDA(
    input: DeleteTrustCenterNDAInput!
  ): DeleteTrustCenterNDAPayload!

  # Trust Center Access CRUD mutations
  createTrustCenterAccess(
    input: CreateTrustCenterAccessInput!
  ): CreateTrustCenterAccessPayload!

  updateTrustCenterAccess(
    input: UpdateTrustCenterAccessInput!
  ): UpdateTrustCenterAccessPayload!

  deleteTrustCenterAccess(
    input: DeleteTrustCenterAccessInput!
  ): DeleteTrustCenterAccessPayload!

  # Trust Center Reference mutations
  createTrustCenterReference(
    input: CreateTrustCenterReferenceInput!
  ): CreateTrustCenterReferencePayload!

  updateTrustCenterReference(
    input: UpdateTrustCenterReferenceInput!
  ): UpdateTrustCenterReferencePayload!

  deleteTrustCenterReference(
    input: DeleteTrustCenterReferenceInput!
  ): DeleteTrustCenterReferencePayload!

  # User mutations
  confirmEmail(input: ConfirmEmailInput!): ConfirmEmailPayload!
  inviteUser(input: InviteUserInput!): InviteUserPayload!
  removeUser(input: RemoveUserInput!): RemoveUserPayload!

  # People mutations
  createPeople(input: CreatePeopleInput!): CreatePeoplePayload!
  updatePeople(input: UpdatePeopleInput!): UpdatePeoplePayload!
  deletePeople(input: DeletePeopleInput!): DeletePeoplePayload!

  # Vendor mutations
  createVendor(input: CreateVendorInput!): CreateVendorPayload!
  updateVendor(input: UpdateVendorInput!): UpdateVendorPayload!
  deleteVendor(input: DeleteVendorInput!): DeleteVendorPayload!

  # Vendor Contact mutations
  createVendorContact(
    input: CreateVendorContactInput!
  ): CreateVendorContactPayload!
  updateVendorContact(
    input: UpdateVendorContactInput!
  ): UpdateVendorContactPayload!
  deleteVendorContact(
    input: DeleteVendorContactInput!
  ): DeleteVendorContactPayload!

  # Vendor Service mutations
  createVendorService(
    input: CreateVendorServiceInput!
  ): CreateVendorServicePayload!
  updateVendorService(
    input: UpdateVendorServiceInput!
  ): UpdateVendorServicePayload!
  deleteVendorService(
    input: DeleteVendorServiceInput!
  ): DeleteVendorServicePayload!

  # Framework mutations
  createFramework(input: CreateFrameworkInput!): CreateFrameworkPayload!
  updateFramework(input: UpdateFrameworkInput!): UpdateFrameworkPayload!
  importFramework(input: ImportFrameworkInput!): ImportFrameworkPayload!
  deleteFramework(input: DeleteFrameworkInput!): DeleteFrameworkPayload!
  generateFrameworkStateOfApplicability(
    input: GenerateFrameworkStateOfApplicabilityInput!
  ): GenerateFrameworkStateOfApplicabilityPayload!
  exportFramework(input: ExportFrameworkInput!): ExportFrameworkPayload!

  # Control mutations
  createControl(input: CreateControlInput!): CreateControlPayload!
  updateControl(input: UpdateControlInput!): UpdateControlPayload!
  deleteControl(input: DeleteControlInput!): DeleteControlPayload!

  # Measure mutations
  createMeasure(input: CreateMeasureInput!): CreateMeasurePayload!
  updateMeasure(input: UpdateMeasureInput!): UpdateMeasurePayload!
  importMeasure(input: ImportMeasureInput!): ImportMeasurePayload!
  deleteMeasure(input: DeleteMeasureInput!): DeleteMeasurePayload!

  # Control mutations
  createControlMeasureMapping(
    input: CreateControlMeasureMappingInput!
  ): CreateControlMeasureMappingPayload!
  createControlDocumentMapping(
    input: CreateControlDocumentMappingInput!
  ): CreateControlDocumentMappingPayload!
  deleteControlMeasureMapping(
    input: DeleteControlMeasureMappingInput!
  ): DeleteControlMeasureMappingPayload!
  deleteControlDocumentMapping(
    input: DeleteControlDocumentMappingInput!
  ): DeleteControlDocumentMappingPayload!
  createControlAuditMapping(
    input: CreateControlAuditMappingInput!
  ): CreateControlAuditMappingPayload!
  deleteControlAuditMapping(
    input: DeleteControlAuditMappingInput!
  ): DeleteControlAuditMappingPayload!
  createControlSnapshotMapping(
    input: CreateControlSnapshotMappingInput!
  ): CreateControlSnapshotMappingPayload!
  deleteControlSnapshotMapping(
    input: DeleteControlSnapshotMappingInput!
  ): DeleteControlSnapshotMappingPayload!

  # Task mutations
  createTask(input: CreateTaskInput!): CreateTaskPayload!
  updateTask(input: UpdateTaskInput!): UpdateTaskPayload!
  deleteTask(input: DeleteTaskInput!): DeleteTaskPayload!
  assignTask(input: AssignTaskInput!): AssignTaskPayload!
  unassignTask(input: UnassignTaskInput!): UnassignTaskPayload!

  # Risk mutations
  createRisk(input: CreateRiskInput!): CreateRiskPayload!
  updateRisk(input: UpdateRiskInput!): UpdateRiskPayload!
  deleteRisk(input: DeleteRiskInput!): DeleteRiskPayload!
  createRiskMeasureMapping(
    input: CreateRiskMeasureMappingInput!
  ): CreateRiskMeasureMappingPayload!
  deleteRiskMeasureMapping(
    input: DeleteRiskMeasureMappingInput!
  ): DeleteRiskMeasureMappingPayload!

  createRiskDocumentMapping(
    input: CreateRiskDocumentMappingInput!
  ): CreateRiskDocumentMappingPayload!
  deleteRiskDocumentMapping(
    input: DeleteRiskDocumentMappingInput!
  ): DeleteRiskDocumentMappingPayload!

  createRiskObligationMapping(
    input: CreateRiskObligationMappingInput!
  ): CreateRiskObligationMappingPayload!
  deleteRiskObligationMapping(
    input: DeleteRiskObligationMappingInput!
  ): DeleteRiskObligationMappingPayload!

  # Evidence mutations
  deleteEvidence(input: DeleteEvidenceInput!): DeleteEvidencePayload!
  uploadMeasureEvidence(
    input: UploadMeasureEvidenceInput!
  ): UploadMeasureEvidencePayload!

  # Vendor Compliance Report mutations
  uploadVendorComplianceReport(
    input: UploadVendorComplianceReportInput!
  ): UploadVendorComplianceReportPayload!
  deleteVendorComplianceReport(
    input: DeleteVendorComplianceReportInput!
  ): DeleteVendorComplianceReportPayload!

  # Vendor Business Associate Agreement mutations
  uploadVendorBusinessAssociateAgreement(
    input: UploadVendorBusinessAssociateAgreementInput!
  ): UploadVendorBusinessAssociateAgreementPayload!
  updateVendorBusinessAssociateAgreement(
    input: UpdateVendorBusinessAssociateAgreementInput!
  ): UpdateVendorBusinessAssociateAgreementPayload!
  deleteVendorBusinessAssociateAgreement(
    input: DeleteVendorBusinessAssociateAgreementInput!
  ): DeleteVendorBusinessAssociateAgreementPayload!

  # Vendor Data Privacy Agreement mutations
  uploadVendorDataPrivacyAgreement(
    input: UploadVendorDataPrivacyAgreementInput!
  ): UploadVendorDataPrivacyAgreementPayload!
  updateVendorDataPrivacyAgreement(
    input: UpdateVendorDataPrivacyAgreementInput!
  ): UpdateVendorDataPrivacyAgreementPayload!
  deleteVendorDataPrivacyAgreement(
    input: DeleteVendorDataPrivacyAgreementInput!
  ): DeleteVendorDataPrivacyAgreementPayload!

  # Document mutations
  createDocument(input: CreateDocumentInput!): CreateDocumentPayload!
  updateDocument(input: UpdateDocumentInput!): UpdateDocumentPayload!
  deleteDocument(input: DeleteDocumentInput!): DeleteDocumentPayload!
  publishDocumentVersion(
    input: PublishDocumentVersionInput!
  ): PublishDocumentVersionPayload!
  bulkPublishDocumentVersions(
    input: BulkPublishDocumentVersionsInput!
  ): BulkPublishDocumentVersionsPayload!
  bulkDeleteDocuments(
    input: BulkDeleteDocumentsInput!
  ): BulkDeleteDocumentsPayload!
  bulkExportDocuments(
    input: BulkExportDocumentsInput!
  ): BulkExportDocumentsPayload!
  generateDocumentChangelog(
    input: GenerateDocumentChangelogInput!
  ): GenerateDocumentChangelogPayload!
  createDraftDocumentVersion(
    input: CreateDraftDocumentVersionInput!
  ): CreateDraftDocumentVersionPayload!
  deleteDraftDocumentVersion(
    input: DeleteDraftDocumentVersionInput!
  ): DeleteDraftDocumentVersionPayload!
  updateDocumentVersion(
    input: UpdateDocumentVersionInput!
  ): UpdateDocumentVersionPayload!
  requestSignature(input: RequestSignatureInput!): RequestSignaturePayload!
  bulkRequestSignatures(
    input: BulkRequestSignaturesInput!
  ): BulkRequestSignaturesPayload!
  sendSigningNotifications(
    input: SendSigningNotificationsInput!
  ): SendSigningNotificationsPayload!
  cancelSignatureRequest(
    input: CancelSignatureRequestInput!
  ): CancelSignatureRequestPayload!
  exportDocumentVersionPDF(
    input: ExportDocumentVersionPDFInput!
  ): ExportDocumentVersionPDFPayload!

  createVendorRiskAssessment(
    input: CreateVendorRiskAssessmentInput!
  ): CreateVendorRiskAssessmentPayload!

  assessVendor(input: AssessVendorInput!): AssessVendorPayload!

  createAsset(input: CreateAssetInput!): CreateAssetPayload!
  updateAsset(input: UpdateAssetInput!): UpdateAssetPayload!
  deleteAsset(input: DeleteAssetInput!): DeleteAssetPayload!

  createDatum(input: CreateDatumInput!): CreateDatumPayload!
  updateDatum(input: UpdateDatumInput!): UpdateDatumPayload!
  deleteDatum(input: DeleteDatumInput!): DeleteDatumPayload!

  createAudit(input: CreateAuditInput!): CreateAuditPayload!
  updateAudit(input: UpdateAuditInput!): UpdateAuditPayload!
  deleteAudit(input: DeleteAuditInput!): DeleteAuditPayload!
  uploadAuditReport(input: UploadAuditReportInput!): UploadAuditReportPayload!
  deleteAuditReport(input: DeleteAuditReportInput!): DeleteAuditReportPayload!

  # Nonconformity mutations
  createNonconformity(
    input: CreateNonconformityInput!
  ): CreateNonconformityPayload!
  updateNonconformity(
    input: UpdateNonconformityInput!
  ): UpdateNonconformityPayload!
  deleteNonconformity(
    input: DeleteNonconformityInput!
  ): DeleteNonconformityPayload!

  # Obligation mutations
  createObligation(input: CreateObligationInput!): CreateObligationPayload!
  updateObligation(input: UpdateObligationInput!): UpdateObligationPayload!
  deleteObligation(input: DeleteObligationInput!): DeleteObligationPayload!

  # Continual Improvement mutations
  createContinualImprovement(
    input: CreateContinualImprovementInput!
  ): CreateContinualImprovementPayload!
  updateContinualImprovement(
    input: UpdateContinualImprovementInput!
  ): UpdateContinualImprovementPayload!
  deleteContinualImprovement(
    input: DeleteContinualImprovementInput!
  ): DeleteContinualImprovementPayload!

  # Processing Activity mutations
  createProcessingActivity(
    input: CreateProcessingActivityInput!
  ): CreateProcessingActivityPayload!
  updateProcessingActivity(
    input: UpdateProcessingActivityInput!
  ): UpdateProcessingActivityPayload!
  deleteProcessingActivity(
    input: DeleteProcessingActivityInput!
  ): DeleteProcessingActivityPayload!

  # Snapshot mutations
  createSnapshot(input: CreateSnapshotInput!): CreateSnapshotPayload!
  deleteSnapshot(input: DeleteSnapshotInput!): DeleteSnapshotPayload!

  # Custom Domain mutations
  createCustomDomain(
    input: CreateCustomDomainInput!
  ): CreateCustomDomainPayload!
  deleteCustomDomain(
    input: DeleteCustomDomainInput!
  ): DeleteCustomDomainPayload!
}

# Input Types
input GenerateFrameworkStateOfApplicabilityInput {
  frameworkId: ID!
}

type GenerateFrameworkStateOfApplicabilityPayload {
  data: String!
}

input CreateOrganizationInput {
  name: String!
}

input UpdateOrganizationInput {
  organizationId: ID!
  name: String
  logo: Upload
  description: String
  websiteUrl: String
  email: String
  headquarterAddress: String
}

input DeleteOrganizationInput {
  organizationId: ID!
}

input UpdateTrustCenterInput {
  trustCenterId: ID!
  active: Boolean
  slug: String
}

input UploadTrustCenterNDAInput {
  trustCenterId: ID!
  fileName: String!
  file: Upload!
}

input DeleteTrustCenterNDAInput {
  trustCenterId: ID!
}

input CreateTrustCenterAccessInput {
  trustCenterId: ID!
  email: String!
  name: String!
  active: Boolean!
}

input UpdateTrustCenterAccessInput {
  id: ID!
  name: String
  active: Boolean
  documentIds: [ID!]
  reportIds: [ID!]
}

input DeleteTrustCenterAccessInput {
  id: ID!
}

input CreateTrustCenterReferenceInput {
  trustCenterId: ID!
  name: String!
  description: String!
  websiteUrl: String!
  logoFile: Upload!
}

input UpdateTrustCenterReferenceInput {
  id: ID!
  name: String
  description: String
  websiteUrl: String
  logoFile: Upload
}

input DeleteTrustCenterReferenceInput {
  id: ID!
}

input CreateVendorInput {
  organizationId: ID!
  name: String!
  description: String
  headquarterAddress: String
  legalName: String
  websiteUrl: String
  privacyPolicyUrl: String
  category: VendorCategory
  serviceLevelAgreementUrl: String
  dataProcessingAgreementUrl: String
  businessAssociateAgreementUrl: String
  subprocessorsListUrl: String
  certifications: [String!]
  countries: [CountryCode!]
  securityPageUrl: String
  trustPageUrl: String
  statusPageUrl: String
  termsOfServiceUrl: String
  businessOwnerId: ID
  securityOwnerId: ID
}

input UpdateVendorInput {
  id: ID!
  name: String
  description: String
  statusPageUrl: String
  termsOfServiceUrl: String
  privacyPolicyUrl: String
  serviceLevelAgreementUrl: String
  dataProcessingAgreementUrl: String
  businessAssociateAgreementUrl: String
  subprocessorsListUrl: String
  websiteUrl: String
  legalName: String
  headquarterAddress: String
  category: VendorCategory
  certifications: [String!]
  countries: [CountryCode!]
  securityPageUrl: String
  trustPageUrl: String
  businessOwnerId: ID
  securityOwnerId: ID
  showOnTrustCenter: Boolean
}

input DeleteVendorInput {
  vendorId: ID!
}

input CreateVendorContactInput {
  vendorId: ID!
  fullName: String
  email: String
  phone: String
  role: String
}

input UpdateVendorContactInput {
  id: ID!
  fullName: String
  email: String
  phone: String
  role: String
}

input DeleteVendorContactInput {
  vendorContactId: ID!
}

input CreateVendorServiceInput {
  vendorId: ID!
  name: String!
  description: String
  url: String
  type: String
}

input UpdateVendorServiceInput {
  id: ID!
  name: String
  description: String
  url: String
  type: String
}

input DeleteVendorServiceInput {
  vendorServiceId: ID!
}

input CreatePeopleInput {
  organizationId: ID!
  fullName: String!
  primaryEmailAddress: String!
  additionalEmailAddresses: [String!]
  kind: PeopleKind!
  position: String
  contractStartDate: Datetime
  contractEndDate: Datetime
}

input UpdatePeopleInput {
  id: ID!
  fullName: String
  primaryEmailAddress: String
  additionalEmailAddresses: [String!]
  kind: PeopleKind
  position: String
  contractStartDate: Datetime
  contractEndDate: Datetime
}

input DeletePeopleInput {
  peopleId: ID!
}

input CreateFrameworkInput {
  organizationId: ID!
  name: String!
  description: String!
}

input UpdateFrameworkInput {
  id: ID!
  name: String
  description: String
}

input ImportFrameworkInput {
  organizationId: ID!
  file: Upload!
}

input DeleteFrameworkInput {
  frameworkId: ID!
}

input ExportFrameworkInput {
  frameworkId: ID!
}

input CreateMeasureInput {
  organizationId: ID!
  name: String!
  description: String!
  category: String!
}

input UpdateMeasureInput {
  id: ID!
  name: String
  description: String
  category: String
  state: MeasureState
}

input ImportMeasureInput {
  organizationId: ID!
  file: Upload!
}

input CreateTaskInput {
  organizationId: ID!
  measureId: ID
  name: String!
  description: String!
  timeEstimate: Duration
  assignedToId: ID
  deadline: Datetime
}

input UpdateTaskInput {
  taskId: ID!
  name: String
  description: String
  state: TaskState
  timeEstimate: Duration
  deadline: Datetime
}

input DeleteTaskInput {
  taskId: ID!
}

input AssignTaskInput {
  taskId: ID!
  assignedToId: ID!
}

input UnassignTaskInput {
  taskId: ID!
}

input CreateControlMeasureMappingInput {
  controlId: ID!
  measureId: ID!
}

input CreateControlDocumentMappingInput {
  controlId: ID!
  documentId: ID!
}

input DeleteControlMeasureMappingInput {
  controlId: ID!
  measureId: ID!
}

input DeleteControlDocumentMappingInput {
  controlId: ID!
  documentId: ID!
}

input CreateControlAuditMappingInput {
  controlId: ID!
  auditId: ID!
}

input DeleteControlAuditMappingInput {
  controlId: ID!
  auditId: ID!
}

input CreateControlSnapshotMappingInput {
  controlId: ID!
  snapshotId: ID!
}

input DeleteControlSnapshotMappingInput {
  controlId: ID!
  snapshotId: ID!
}

input CreateRiskInput {
  organizationId: ID!
  name: String!
  description: String!
  category: String!
  ownerId: ID
  treatment: RiskTreatment!
  inherentLikelihood: Int!
  inherentImpact: Int!
  residualLikelihood: Int
  residualImpact: Int
  note: String
}

input UpdateRiskInput {
  id: ID!
  name: String
  description: String
  category: String
  ownerId: ID
  treatment: RiskTreatment
  inherentLikelihood: Int
  inherentImpact: Int
  residualLikelihood: Int
  residualImpact: Int
  note: String
}

input DeleteRiskInput {
  riskId: ID!
}

input CreateRiskMeasureMappingInput {
  riskId: ID!
  measureId: ID!
}

input DeleteRiskMeasureMappingInput {
  riskId: ID!
  measureId: ID!
}

input CreateRiskDocumentMappingInput {
  riskId: ID!
  documentId: ID!
}

input DeleteRiskDocumentMappingInput {
  riskId: ID!
  documentId: ID!
}

input CreateRiskObligationMappingInput {
  riskId: ID!
  obligationId: ID!
}

input DeleteRiskObligationMappingInput {
  riskId: ID!
  obligationId: ID!
}

input RequestEvidenceInput {
  taskId: ID!
  name: String!
  type: EvidenceType!
  description: String!
}

input FulfillEvidenceInput {
  evidenceId: ID!
  name: String
  file: Upload
  url: String
}

input CreateEvidenceInput {
  taskId: ID!
  name: String!
  type: EvidenceType!
  url: String
  file: Upload
  description: String!
}

input DeleteEvidenceInput {
  evidenceId: ID!
}

input UploadVendorComplianceReportInput {
  vendorId: ID!
  reportDate: Datetime!
  validUntil: Datetime
  reportName: String!
  file: Upload!
}

input DeleteVendorComplianceReportInput {
  reportId: ID!
}

input UploadVendorBusinessAssociateAgreementInput {
  vendorId: ID!
  validFrom: Datetime
  validUntil: Datetime
  fileName: String!
  file: Upload!
}

input UpdateVendorBusinessAssociateAgreementInput {
  vendorId: ID!
  validFrom: Datetime
  validUntil: Datetime
}

input DeleteVendorBusinessAssociateAgreementInput {
  vendorId: ID!
}

input UploadVendorDataPrivacyAgreementInput {
  vendorId: ID!
  validFrom: Datetime
  validUntil: Datetime
  fileName: String!
  file: Upload!
}

input UpdateVendorDataPrivacyAgreementInput {
  vendorId: ID!
  validFrom: Datetime
  validUntil: Datetime
}

input DeleteVendorDataPrivacyAgreementInput {
  vendorId: ID!
}

input CreateDocumentInput {
  organizationId: ID!
  title: String!
  content: String!
  ownerId: ID!
  documentType: DocumentType!
  trustCenterVisibility: TrustCenterVisibility
}

input UpdateDocumentInput {
  id: ID!
  title: String
  content: String
  ownerId: ID
  documentType: DocumentType
  trustCenterVisibility: TrustCenterVisibility
}

input ExportDocumentVersionPDFInput {
  documentVersionId: ID!
  withWatermark: Boolean!
  watermarkEmail: String
  withSignatures: Boolean!
}

input DeleteDocumentInput {
  documentId: ID!
}

input ConfirmEmailInput {
  token: String!
}

input InviteUserInput {
  organizationId: ID!
  email: String!
  fullName: String!
  createPeople: Boolean!
}

input RemoveUserInput {
  organizationId: ID!
  userId: ID!
}

input CreateControlInput {
  frameworkId: ID!
  sectionTitle: String!
  name: String!
  description: String!
  status: ControlStatus!
  exclusionJustification: String
}

input UpdateControlInput {
  id: ID!
  sectionTitle: String
  name: String
  description: String
  status: ControlStatus
  exclusionJustification: String
}

input DeleteControlInput {
  controlId: ID!
}

# Audit input types
input CreateAuditInput {
  organizationId: ID!
  frameworkId: ID!
  name: String
  validFrom: Datetime
  validUntil: Datetime
  state: AuditState
  trustCenterVisibility: TrustCenterVisibility
}

input UpdateAuditInput {
  id: ID!
  name: String
  validFrom: Datetime
  validUntil: Datetime
  state: AuditState
  trustCenterVisibility: TrustCenterVisibility
}

input DeleteAuditInput {
  auditId: ID!
}

input UploadAuditReportInput {
  auditId: ID!
  file: Upload!
}

input DeleteAuditReportInput {
  auditId: ID!
}

# Nonconformity input types
input CreateNonconformityInput {
  organizationId: ID!
  referenceId: String!
  description: String
  auditId: ID!
  dateIdentified: Datetime
  rootCause: String!
  correctiveAction: String
  ownerId: ID!
  dueDate: Datetime
  status: NonconformityStatus!
  effectivenessCheck: String
}

input UpdateNonconformityInput {
  id: ID!
  referenceId: String
  description: String
  dateIdentified: Datetime
  rootCause: String
  correctiveAction: String
  ownerId: ID
  auditId: ID
  dueDate: Datetime
  status: NonconformityStatus
  effectivenessCheck: String
}

input DeleteNonconformityInput {
  nonconformityId: ID!
}

input CreateObligationInput {
  organizationId: ID!
  area: String
  source: String
  requirement: String
  actionsToBeImplemented: String
  regulator: String
  ownerId: ID!
  lastReviewDate: Datetime
  dueDate: Datetime
  status: ObligationStatus!
}

input UpdateObligationInput {
  id: ID!
  area: String
  source: String
  requirement: String
  actionsToBeImplemented: String
  regulator: String
  ownerId: ID
  lastReviewDate: Datetime
  dueDate: Datetime
  status: ObligationStatus
}

input DeleteObligationInput {
  obligationId: ID!
}

input CreateContinualImprovementInput {
  organizationId: ID!
  referenceId: String!
  description: String
  source: String
  ownerId: ID!
  targetDate: Datetime
  status: ContinualImprovementStatus!
  priority: ContinualImprovementPriority!
}

input UpdateContinualImprovementInput {
  id: ID!
  referenceId: String
  description: String
  source: String
  ownerId: ID
  targetDate: Datetime
  status: ContinualImprovementStatus
  priority: ContinualImprovementPriority
}

input DeleteContinualImprovementInput {
  continualImprovementId: ID!
}

input CreateProcessingActivityInput {
  organizationId: ID!
  name: String!
  purpose: String
  dataSubjectCategory: String
  personalDataCategory: String
  specialOrCriminalData: ProcessingActivitySpecialOrCriminalData!
  consentEvidenceLink: String
  lawfulBasis: ProcessingActivityLawfulBasis!
  recipients: String
  location: String
  internationalTransfers: Boolean!
  transferSafeguards: ProcessingActivityTransferSafeguards
  retentionPeriod: String
  securityMeasures: String
  dataProtectionImpactAssessment: ProcessingActivityDataProtectionImpactAssessment!
  transferImpactAssessment: ProcessingActivityTransferImpactAssessment!
}

input UpdateProcessingActivityInput {
  id: ID!
  name: String
  purpose: String
  dataSubjectCategory: String
  personalDataCategory: String
  specialOrCriminalData: ProcessingActivitySpecialOrCriminalData
  consentEvidenceLink: String
  lawfulBasis: ProcessingActivityLawfulBasis
  recipients: String
  location: String
  internationalTransfers: Boolean
  transferSafeguards: ProcessingActivityTransferSafeguards
  retentionPeriod: String
  securityMeasures: String
  dataProtectionImpactAssessment: ProcessingActivityDataProtectionImpactAssessment
  transferImpactAssessment: ProcessingActivityTransferImpactAssessment
}

input DeleteProcessingActivityInput {
  processingActivityId: ID!
}

input CreateSnapshotInput {
  organizationId: ID!
  name: String!
  description: String
  type: SnapshotsType!
}

input DeleteSnapshotInput {
  snapshotId: ID!
}

# Payload Types
type CreateOrganizationPayload {
  organizationEdge: OrganizationEdge!
}

type UpdateOrganizationPayload {
  organization: Organization!
}

type DeleteOrganizationPayload {
  deletedOrganizationId: ID!
}

type UpdateTrustCenterPayload {
  trustCenter: TrustCenter!
}

type UploadTrustCenterNDAPayload {
  trustCenter: TrustCenter!
}

type DeleteTrustCenterNDAPayload {
  trustCenter: TrustCenter!
}

type CreateTrustCenterAccessPayload {
  trustCenterAccessEdge: TrustCenterAccessEdge!
}

type UpdateTrustCenterAccessPayload {
  trustCenterAccess: TrustCenterAccess!
}

type DeleteTrustCenterAccessPayload {
  deletedTrustCenterAccessId: ID!
}

type CreateTrustCenterReferencePayload {
  trustCenterReferenceEdge: TrustCenterReferenceEdge!
}

type UpdateTrustCenterReferencePayload {
  trustCenterReference: TrustCenterReference!
}

type DeleteTrustCenterReferencePayload {
  deletedTrustCenterReferenceId: ID!
}

type CreateControlPayload {
  controlEdge: ControlEdge!
}

type UpdateControlPayload {
  control: Control!
}

type DeleteControlPayload {
  deletedControlId: ID!
}

type CreateVendorPayload {
  vendorEdge: VendorEdge!
}

type UpdateVendorPayload {
  vendor: Vendor!
}

type DeleteVendorPayload {
  deletedVendorId: ID!
}

type CreateVendorContactPayload {
  vendorContactEdge: VendorContactEdge!
}

type UpdateVendorContactPayload {
  vendorContact: VendorContact!
}

type DeleteVendorContactPayload {
  deletedVendorContactId: ID!
}

type CreateVendorServicePayload {
  vendorServiceEdge: VendorServiceEdge!
}

type UpdateVendorServicePayload {
  vendorService: VendorService!
}

type DeleteVendorServicePayload {
  deletedVendorServiceId: ID!
}

type CreatePeoplePayload {
  peopleEdge: PeopleEdge!
}

type UpdatePeoplePayload {
  people: People!
}

type DeletePeoplePayload {
  deletedPeopleId: ID!
}

type CreateFrameworkPayload {
  frameworkEdge: FrameworkEdge!
}

type UpdateFrameworkPayload {
  framework: Framework!
}

type ImportFrameworkPayload {
  frameworkEdge: FrameworkEdge!
}

type DeleteFrameworkPayload {
  deletedFrameworkId: ID!
}

type ExportFrameworkPayload {
  exportJobId: ID!
}

type CreateMeasurePayload {
  measureEdge: MeasureEdge!
}

type UpdateMeasurePayload {
  measure: Measure!
}

type ImportMeasurePayload {
  measureEdges: [MeasureEdge!]!
}

type CreateTaskPayload {
  taskEdge: TaskEdge!
}

type UpdateTaskPayload {
  task: Task!
}

type DeleteTaskPayload {
  deletedTaskId: ID!
}

type AssignTaskPayload {
  task: Task!
}

type UnassignTaskPayload {
  task: Task!
}

type CreateControlMeasureMappingPayload {
  controlEdge: ControlEdge!
  measureEdge: MeasureEdge!
}

type CreateControlDocumentMappingPayload {
  controlEdge: ControlEdge!
  documentEdge: DocumentEdge!
}

type DeleteControlMeasureMappingPayload {
  deletedControlId: ID!
  deletedMeasureId: ID!
}

type DeleteControlDocumentMappingPayload {
  deletedControlId: ID!
  deletedDocumentId: ID!
}

type CreateControlAuditMappingPayload {
  controlEdge: ControlEdge!
  auditEdge: AuditEdge!
}

type DeleteControlAuditMappingPayload {
  deletedControlId: ID!
  deletedAuditId: ID!
}

type CreateControlSnapshotMappingPayload {
  controlEdge: ControlEdge!
  snapshotEdge: SnapshotEdge!
}

type DeleteControlSnapshotMappingPayload {
  deletedControlId: ID!
  deletedSnapshotId: ID!
}

type CreateRiskPayload {
  riskEdge: RiskEdge!
}

type UpdateRiskPayload {
  risk: Risk!
}

type DeleteRiskPayload {
  deletedRiskId: ID!
}

type CreateRiskMeasureMappingPayload {
  riskEdge: RiskEdge!
  measureEdge: MeasureEdge!
}

type DeleteRiskMeasureMappingPayload {
  deletedMeasureId: ID!
  deletedRiskId: ID!
}

type CreateRiskDocumentMappingPayload {
  riskEdge: RiskEdge!
  documentEdge: DocumentEdge!
}

type DeleteRiskDocumentMappingPayload {
  deletedRiskId: ID!
  deletedDocumentId: ID!
}

type CreateRiskObligationMappingPayload {
  riskEdge: RiskEdge!
  obligationEdge: ObligationEdge!
}

type DeleteRiskObligationMappingPayload {
  deletedRiskId: ID!
  deletedObligationId: ID!
}

type RequestEvidencePayload {
  evidenceEdge: EvidenceEdge!
}

type FulfillEvidencePayload {
  evidenceEdge: EvidenceEdge!
}

type CreateEvidencePayload {
  evidenceEdge: EvidenceEdge!
}

type DeleteEvidencePayload {
  deletedEvidenceId: ID!
}

type UploadVendorComplianceReportPayload {
  vendorComplianceReportEdge: VendorComplianceReportEdge!
}

type DeleteVendorComplianceReportPayload {
  deletedVendorComplianceReportId: ID!
}

type UploadVendorBusinessAssociateAgreementPayload {
  vendorBusinessAssociateAgreement: VendorBusinessAssociateAgreement!
}

type UpdateVendorBusinessAssociateAgreementPayload {
  vendorBusinessAssociateAgreement: VendorBusinessAssociateAgreement!
}

type DeleteVendorBusinessAssociateAgreementPayload {
  deletedVendorId: ID!
}

type UploadVendorDataPrivacyAgreementPayload {
  vendorDataPrivacyAgreement: VendorDataPrivacyAgreement!
}

type UpdateVendorDataPrivacyAgreementPayload {
  vendorDataPrivacyAgreement: VendorDataPrivacyAgreement!
}

type DeleteVendorDataPrivacyAgreementPayload {
  deletedVendorId: ID!
}

type CreateDocumentPayload {
  documentEdge: DocumentEdge!
  documentVersionEdge: DocumentVersionEdge!
}

type ExportDocumentVersionPDFPayload {
  data: String!
}

type UpdateDocumentPayload {
  document: Document!
}

type DeleteDocumentPayload {
  deletedDocumentId: ID!
}

type ConfirmEmailPayload {
  success: Boolean!
}

type InviteUserPayload {
  success: Boolean!
}

type RemoveUserPayload {
  success: Boolean!
}

input VendorRiskAssessmentOrder {
  field: VendorRiskAssessmentOrderField!
  direction: OrderDirection!
}

type VendorRiskAssessment implements Node {
  id: ID!
  vendor: Vendor! @goField(forceResolver: true)
  expiresAt: Datetime!
  dataSensitivity: DataSensitivity!
  businessImpact: BusinessImpact!
  notes: String
  createdAt: Datetime!
  updatedAt: Datetime!
}

enum VendorRiskAssessmentOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.VendorRiskAssessmentOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorRiskAssessmentOrderFieldCreatedAt"
    )
  EXPIRES_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.VendorRiskAssessmentOrderFieldExpiresAt"
    )
}

input CreateVendorRiskAssessmentInput {
  vendorId: ID!
  expiresAt: Datetime!
  dataSensitivity: DataSensitivity!
  businessImpact: BusinessImpact!
  notes: String
}

type CreateVendorRiskAssessmentPayload {
  vendorRiskAssessmentEdge: VendorRiskAssessmentEdge!
}

input DeleteMeasureInput {
  measureId: ID!
}

type DeleteMeasurePayload {
  deletedMeasureId: ID!
}

type DocumentVersion implements Node {
  id: ID!
  document: Document! @goField(forceResolver: true)
  status: DocumentStatus!
  version: Int!
  content: String!
  changelog: String!
  title: String!
  owner: People! @goField(forceResolver: true)

  signatures(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: DocumentVersionSignatureOrder
  ): DocumentVersionSignatureConnection! @goField(forceResolver: true)

  publishedAt: Datetime
  createdAt: Datetime!
  updatedAt: Datetime!
}

type DocumentVersionSignatureConnection {
  edges: [DocumentVersionSignatureEdge!]!
  pageInfo: PageInfo!
}

type DocumentVersionSignatureEdge {
  cursor: CursorKey!
  node: DocumentVersionSignature!
}

input DocumentVersionSignatureOrder {
  field: DocumentVersionSignatureOrderField!
  direction: OrderDirection!
}

enum DocumentVersionSignatureState
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.DocumentVersionSignatureState"
  ) {
  REQUESTED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DocumentVersionSignatureStateRequested"
    )
  SIGNED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DocumentVersionSignatureStateSigned"
    )
}

enum DocumentVersionSignatureOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.DocumentVersionSignatureOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DocumentVersionSignatureOrderFieldCreatedAt"
    )
  SIGNED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.DocumentVersionSignatureOrderFieldSignedAt"
    )
}

type DocumentVersionSignature implements Node {
  id: ID!
  documentVersion: DocumentVersion! @goField(forceResolver: true)
  state: DocumentVersionSignatureState!
  signedBy: People! @goField(forceResolver: true)
  signedAt: Datetime
  requestedAt: Datetime!
  createdAt: Datetime!
  updatedAt: Datetime!
}

input RequestSignatureInput {
  documentVersionId: ID!
  signatoryId: ID!
}

input BulkRequestSignaturesInput {
  documentIds: [ID!]!
  signatoryIds: [ID!]!
}

type RequestSignaturePayload {
  documentVersionSignatureEdge: DocumentVersionSignatureEdge!
}

type BulkRequestSignaturesPayload {
  documentVersionSignatureEdges: [DocumentVersionSignatureEdge!]!
}

input BulkPublishDocumentVersionsInput {
  documentIds: [ID!]!
  changelog: String!
}

type BulkPublishDocumentVersionsPayload {
  documentVersionEdges: [DocumentVersionEdge!]!
  documentEdges: [DocumentEdge!]!
}

input BulkDeleteDocumentsInput {
  documentIds: [ID!]!
}

input BulkExportDocumentsInput {
  documentIds: [ID!]!
  withWatermark: Boolean!
  watermarkEmail: String
  withSignatures: Boolean!
}

type BulkDeleteDocumentsPayload {
  deletedDocumentIds: [ID!]!
}

type BulkExportDocumentsPayload {
  exportJobId: ID!
}

input PublishDocumentVersionInput {
  documentId: ID!
  changelog: String
}

type PublishDocumentVersionPayload {
  documentVersion: DocumentVersion!
  document: Document!
}

type CreateDraftDocumentVersionPayload {
  documentVersionEdge: DocumentVersionEdge!
}

type DeleteDraftDocumentVersionPayload {
  deletedDocumentVersionId: ID!
}

input CreateDraftDocumentVersionInput {
  documentID: ID!
}

input DeleteDraftDocumentVersionInput {
  documentVersionId: ID!
}

input UpdateDocumentVersionInput {
  documentVersionId: ID!
  content: String!
}

input CancelSignatureRequestInput {
  documentVersionSignatureId: ID!
}

type UpdateDocumentVersionPayload {
  documentVersion: DocumentVersion!
}

input SendSigningNotificationsInput {
  organizationId: ID!
}

type SendSigningNotificationsPayload {
  success: Boolean!
}

type CancelSignatureRequestPayload {
  deletedDocumentVersionSignatureId: ID!
}

type UploadMeasureEvidencePayload {
  evidenceEdge: EvidenceEdge!
}

input UploadMeasureEvidenceInput {
  measureId: ID!
  file: Upload!
}

input GenerateDocumentChangelogInput {
  documentId: ID!
}

type GenerateDocumentChangelogPayload {
  changelog: String!
}

input AssessVendorInput {
  id: ID!
  websiteUrl: String!
}

type AssessVendorPayload {
  vendor: Vendor!
}

type Asset implements Node {
  id: ID!
  snapshotId: ID
  name: String!
  amount: Int!
  owner: People! @goField(forceResolver: true)
  vendors(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: VendorOrder
  ): VendorConnection! @goField(forceResolver: true)
  criticity: CriticityLevel!
  assetType: AssetType! @goField(forceResolver: true)
  dataTypesStored: String!
  organization: Organization! @goField(forceResolver: true)
  createdAt: Datetime!
  updatedAt: Datetime!
}

type AssetConnection
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.AssetConnection"
  ) {
  totalCount: Int! @goField(forceResolver: true)
  edges: [AssetEdge!]!
  pageInfo: PageInfo!
}

type AssetEdge {
  cursor: CursorKey!
  node: Asset!
}

input AssetOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.AssetOrderBy"
  ) {
  direction: OrderDirection!
  field: AssetOrderField!
}

input CreateAssetInput {
  organizationId: ID!
  name: String!
  amount: Int!
  ownerId: ID!
  criticity: CriticityLevel! = MEDIUM
  assetType: AssetType!
  dataTypesStored: String!
  vendorIds: [ID!]
}

input UpdateAssetInput {
  id: ID!
  name: String
  amount: Int
  ownerId: ID
  criticity: CriticityLevel
  assetType: AssetType
  dataTypesStored: String
  vendorIds: [ID!]
}

input DeleteAssetInput {
  assetId: ID!
}

type CreateAssetPayload {
  assetEdge: AssetEdge!
}

type UpdateAssetPayload {
  asset: Asset!
}

type DeleteAssetPayload {
  deletedAssetId: ID!
}

type Datum implements Node {
  id: ID!
  snapshotId: ID
  name: String!
  dataClassification: DataClassification!
  owner: People! @goField(forceResolver: true)
  vendors(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: VendorOrder
  ): VendorConnection! @goField(forceResolver: true)
  organization: Organization! @goField(forceResolver: true)
  createdAt: Datetime!
  updatedAt: Datetime!
}

input DatumOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.DatumOrderBy"
  ) {
  direction: OrderDirection!
  field: DatumOrderField!
}

input CreateDatumInput {
  organizationId: ID!
  name: String!
  dataClassification: DataClassification!
  ownerId: ID!
  vendorIds: [ID!]
}

input UpdateDatumInput {
  id: ID!
  name: String
  dataClassification: DataClassification
  ownerId: ID
  vendorIds: [ID!]
}

input DeleteDatumInput {
  datumId: ID!
}

type CreateDatumPayload {
  datumEdge: DatumEdge!
}

type UpdateDatumPayload {
  datum: Datum!
}

type DeleteDatumPayload {
  deletedDatumId: ID!
}

type CreateAuditPayload {
  auditEdge: AuditEdge!
}

type UpdateAuditPayload {
  audit: Audit!
}

type DeleteAuditPayload {
  deletedAuditId: ID!
}

type UploadAuditReportPayload {
  audit: Audit!
}

type DeleteAuditReportPayload {
  audit: Audit!
}

# Nonconformity payload types
type CreateNonconformityPayload {
  nonconformityEdge: NonconformityEdge!
}

type UpdateNonconformityPayload {
  nonconformity: Nonconformity!
}

type DeleteNonconformityPayload {
  deletedNonconformityId: ID!
}

type CreateObligationPayload {
  obligationEdge: ObligationEdge!
}

type UpdateObligationPayload {
  obligation: Obligation!
}

type DeleteObligationPayload {
  deletedObligationId: ID!
}

type CreateContinualImprovementPayload {
  continualImprovementEdge: ContinualImprovementEdge!
}

type UpdateContinualImprovementPayload {
  continualImprovement: ContinualImprovement!
}

type DeleteContinualImprovementPayload {
  deletedContinualImprovementId: ID!
}

type CreateProcessingActivityPayload {
  processingActivityEdge: ProcessingActivityEdge!
}

type UpdateProcessingActivityPayload {
  processingActivity: ProcessingActivity!
}

type DeleteProcessingActivityPayload {
  deletedProcessingActivityId: ID!
}

type CreateSnapshotPayload {
  snapshotEdge: SnapshotEdge!
}

type DeleteSnapshotPayload {
  deletedSnapshotId: ID!
}

enum SSLStatus
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.CustomDomainSSLStatus"
  ) {
  PENDING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.CustomDomainSSLStatusPending"
    )
  PROVISIONING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.CustomDomainSSLStatusProvisioning"
    )
  ACTIVE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.CustomDomainSSLStatusActive"
    )
  RENEWING
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.CustomDomainSSLStatusRenewing"
    )
  EXPIRED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.CustomDomainSSLStatusExpired"
    )
  FAILED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.CustomDomainSSLStatusFailed"
    )
}

type CustomDomain implements Node {
  id: ID!
  organization: Organization!
  domain: String!
  sslStatus: SSLStatus!
  sslExpiresAt: Datetime
  dnsRecords: [DNSRecordInstruction!]!
  createdAt: Datetime!
  updatedAt: Datetime!
  verifiedAt: Datetime
}

type DNSRecordInstruction {
  type: String!
  name: String!
  value: String!
  ttl: Int!
  purpose: String!
}

input CreateCustomDomainInput {
  organizationId: ID!
  domain: String!
}

input DeleteCustomDomainInput {
  organizationId: ID!
}

type CreateCustomDomainPayload {
  customDomain: CustomDomain!
}

type DeleteCustomDomainPayload {
  deletedCustomDomainId: ID!
}
