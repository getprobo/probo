// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package types

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/getprobo/probo/pkg/coredata"
	"github.com/getprobo/probo/pkg/gid"
	"github.com/getprobo/probo/pkg/page"
)

type Node interface {
	IsNode()
	GetID() gid.GID
}

type AssessVendorInput struct {
	ID         gid.GID `json:"id"`
	WebsiteURL string  `json:"websiteUrl"`
}

type AssessVendorPayload struct {
	Vendor *Vendor `json:"vendor"`
}

type AssignTaskInput struct {
	TaskID       gid.GID `json:"taskId"`
	AssignedToID gid.GID `json:"assignedToId"`
}

type AssignTaskPayload struct {
	Task *Task `json:"task"`
}

type ConfirmEmailInput struct {
	Token string `json:"token"`
}

type ConfirmEmailPayload struct {
	Success bool `json:"success"`
}

type Connector struct {
	ID        gid.GID   `json:"id"`
	Name      string    `json:"name"`
	Type      string    `json:"type"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

func (Connector) IsNode()             {}
func (this Connector) GetID() gid.GID { return this.ID }

type ConnectorConnection struct {
	Edges    []*ConnectorEdge `json:"edges"`
	PageInfo *PageInfo        `json:"pageInfo"`
}

type ConnectorEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Connector     `json:"node"`
}

type ConnectorOrder struct {
	Field     coredata.ConnectorOrderField `json:"field"`
	Direction page.OrderDirection          `json:"direction"`
}

type Control struct {
	ID          gid.GID             `json:"id"`
	ReferenceID string              `json:"referenceId"`
	Name        string              `json:"name"`
	Description string              `json:"description"`
	Framework   *Framework          `json:"framework"`
	Measures    *MeasureConnection  `json:"measures"`
	Documents   *DocumentConnection `json:"documents"`
	CreatedAt   time.Time           `json:"createdAt"`
	UpdatedAt   time.Time           `json:"updatedAt"`
}

func (Control) IsNode()             {}
func (this Control) GetID() gid.GID { return this.ID }

type ControlConnection struct {
	Edges    []*ControlEdge `json:"edges"`
	PageInfo *PageInfo      `json:"pageInfo"`
}

type ControlEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Control       `json:"node"`
}

type CreateControlDocumentMappingInput struct {
	ControlID  gid.GID `json:"controlId"`
	DocumentID gid.GID `json:"documentId"`
}

type CreateControlDocumentMappingPayload struct {
	ControlEdge  *ControlEdge  `json:"controlEdge"`
	DocumentEdge *DocumentEdge `json:"documentEdge"`
}

type CreateControlMeasureMappingInput struct {
	ControlID gid.GID `json:"controlId"`
	MeasureID gid.GID `json:"measureId"`
}

type CreateControlMeasureMappingPayload struct {
	ControlEdge *ControlEdge `json:"controlEdge"`
	MeasureEdge *MeasureEdge `json:"measureEdge"`
}

type CreateDocumentInput struct {
	OrganizationID gid.GID               `json:"organizationId"`
	Title          string                `json:"title"`
	Content        string                `json:"content"`
	OwnerID        gid.GID               `json:"ownerId"`
	DocumentType   coredata.DocumentType `json:"documentType"`
}

type CreateDocumentPayload struct {
	DocumentEdge        *DocumentEdge        `json:"documentEdge"`
	DocumentVersionEdge *DocumentVersionEdge `json:"documentVersionEdge"`
}

type CreateDraftDocumentVersionInput struct {
	DocumentID gid.GID `json:"documentID"`
}

type CreateDraftDocumentVersionPayload struct {
	DocumentVersionEdge *DocumentVersionEdge `json:"documentVersionEdge"`
}

type CreateEvidenceInput struct {
	TaskID      gid.GID               `json:"taskId"`
	Name        string                `json:"name"`
	Type        coredata.EvidenceType `json:"type"`
	URL         *string               `json:"url,omitempty"`
	File        *graphql.Upload       `json:"file,omitempty"`
	Description string                `json:"description"`
}

type CreateEvidencePayload struct {
	EvidenceEdge *EvidenceEdge `json:"evidenceEdge"`
}

type CreateFrameworkInput struct {
	OrganizationID gid.GID `json:"organizationId"`
	Name           string  `json:"name"`
	Description    string  `json:"description"`
}

type CreateFrameworkPayload struct {
	FrameworkEdge *FrameworkEdge `json:"frameworkEdge"`
}

type CreateMeasureInput struct {
	OrganizationID gid.GID `json:"organizationId"`
	Name           string  `json:"name"`
	Description    string  `json:"description"`
	Category       string  `json:"category"`
}

type CreateMeasurePayload struct {
	MeasureEdge *MeasureEdge `json:"measureEdge"`
}

type CreateOrganizationInput struct {
	Name string `json:"name"`
}

type CreateOrganizationPayload struct {
	OrganizationEdge *OrganizationEdge `json:"organizationEdge"`
}

type CreatePeopleInput struct {
	OrganizationID           gid.GID             `json:"organizationId"`
	FullName                 string              `json:"fullName"`
	PrimaryEmailAddress      string              `json:"primaryEmailAddress"`
	AdditionalEmailAddresses []string            `json:"additionalEmailAddresses,omitempty"`
	Kind                     coredata.PeopleKind `json:"kind"`
	Position                 *string             `json:"position,omitempty"`
	ContractStartDate        *time.Time          `json:"contractStartDate,omitempty"`
	ContractEndDate          *time.Time          `json:"contractEndDate,omitempty"`
}

type CreatePeoplePayload struct {
	PeopleEdge *PeopleEdge `json:"peopleEdge"`
}

type CreateRiskDocumentMappingInput struct {
	RiskID     gid.GID `json:"riskId"`
	DocumentID gid.GID `json:"documentId"`
}

type CreateRiskDocumentMappingPayload struct {
	RiskEdge     *RiskEdge     `json:"riskEdge"`
	DocumentEdge *DocumentEdge `json:"documentEdge"`
}

type CreateRiskInput struct {
	OrganizationID     gid.GID                `json:"organizationId"`
	Name               string                 `json:"name"`
	Description        string                 `json:"description"`
	Category           string                 `json:"category"`
	OwnerID            *gid.GID               `json:"ownerId,omitempty"`
	Treatment          coredata.RiskTreatment `json:"treatment"`
	InherentLikelihood int                    `json:"inherentLikelihood"`
	InherentImpact     int                    `json:"inherentImpact"`
	ResidualLikelihood *int                   `json:"residualLikelihood,omitempty"`
	ResidualImpact     *int                   `json:"residualImpact,omitempty"`
	Note               *string                `json:"note,omitempty"`
}

type CreateRiskMeasureMappingInput struct {
	RiskID    gid.GID `json:"riskId"`
	MeasureID gid.GID `json:"measureId"`
}

type CreateRiskMeasureMappingPayload struct {
	RiskEdge    *RiskEdge    `json:"riskEdge"`
	MeasureEdge *MeasureEdge `json:"measureEdge"`
}

type CreateRiskPayload struct {
	RiskEdge *RiskEdge `json:"riskEdge"`
}

type CreateTaskInput struct {
	OrganizationID gid.GID        `json:"organizationId"`
	MeasureID      *gid.GID       `json:"measureId,omitempty"`
	Name           string         `json:"name"`
	Description    string         `json:"description"`
	TimeEstimate   *time.Duration `json:"timeEstimate,omitempty"`
	AssignedToID   *gid.GID       `json:"assignedToId,omitempty"`
	Deadline       *time.Time     `json:"deadline,omitempty"`
}

type CreateTaskPayload struct {
	TaskEdge *TaskEdge `json:"taskEdge"`
}

type CreateVendorInput struct {
	OrganizationID                gid.GID                  `json:"organizationId"`
	Name                          string                   `json:"name"`
	Description                   *string                  `json:"description,omitempty"`
	HeadquarterAddress            *string                  `json:"headquarterAddress,omitempty"`
	LegalName                     *string                  `json:"legalName,omitempty"`
	WebsiteURL                    *string                  `json:"websiteUrl,omitempty"`
	PrivacyPolicyURL              *string                  `json:"privacyPolicyUrl,omitempty"`
	Category                      *coredata.VendorCategory `json:"category,omitempty"`
	ServiceLevelAgreementURL      *string                  `json:"serviceLevelAgreementUrl,omitempty"`
	DataProcessingAgreementURL    *string                  `json:"dataProcessingAgreementUrl,omitempty"`
	BusinessAssociateAgreementURL *string                  `json:"businessAssociateAgreementUrl,omitempty"`
	SubprocessorsListURL          *string                  `json:"subprocessorsListUrl,omitempty"`
	Certifications                []string                 `json:"certifications,omitempty"`
	SecurityPageURL               *string                  `json:"securityPageUrl,omitempty"`
	TrustPageURL                  *string                  `json:"trustPageUrl,omitempty"`
	StatusPageURL                 *string                  `json:"statusPageUrl,omitempty"`
	TermsOfServiceURL             *string                  `json:"termsOfServiceUrl,omitempty"`
	BusinessOwnerID               *gid.GID                 `json:"businessOwnerId,omitempty"`
	SecurityOwnerID               *gid.GID                 `json:"securityOwnerId,omitempty"`
}

type CreateVendorPayload struct {
	VendorEdge *VendorEdge `json:"vendorEdge"`
}

type CreateVendorRiskAssessmentInput struct {
	VendorID        gid.GID                  `json:"vendorId"`
	AssessedBy      gid.GID                  `json:"assessedBy"`
	ExpiresAt       time.Time                `json:"expiresAt"`
	DataSensitivity coredata.DataSensitivity `json:"dataSensitivity"`
	BusinessImpact  coredata.BusinessImpact  `json:"businessImpact"`
	Notes           *string                  `json:"notes,omitempty"`
}

type CreateVendorRiskAssessmentPayload struct {
	VendorRiskAssessmentEdge *VendorRiskAssessmentEdge `json:"vendorRiskAssessmentEdge"`
}

type DeleteControlDocumentMappingInput struct {
	ControlID  gid.GID `json:"controlId"`
	DocumentID gid.GID `json:"documentId"`
}

type DeleteControlDocumentMappingPayload struct {
	DeletedControlID  gid.GID `json:"deletedControlId"`
	DeletedDocumentID gid.GID `json:"deletedDocumentId"`
}

type DeleteControlMeasureMappingInput struct {
	ControlID gid.GID `json:"controlId"`
	MeasureID gid.GID `json:"measureId"`
}

type DeleteControlMeasureMappingPayload struct {
	DeletedControlID gid.GID `json:"deletedControlId"`
	DeletedMeasureID gid.GID `json:"deletedMeasureId"`
}

type DeleteDocumentInput struct {
	DocumentID gid.GID `json:"documentId"`
}

type DeleteDocumentPayload struct {
	DeletedDocumentID gid.GID `json:"deletedDocumentId"`
}

type DeleteEvidenceInput struct {
	EvidenceID gid.GID `json:"evidenceId"`
}

type DeleteEvidencePayload struct {
	DeletedEvidenceID gid.GID `json:"deletedEvidenceId"`
}

type DeleteFrameworkInput struct {
	FrameworkID gid.GID `json:"frameworkId"`
}

type DeleteFrameworkPayload struct {
	DeletedFrameworkID gid.GID `json:"deletedFrameworkId"`
}

type DeleteMeasureInput struct {
	MeasureID gid.GID `json:"measureId"`
}

type DeleteMeasurePayload struct {
	DeletedMeasureID gid.GID `json:"deletedMeasureId"`
}

type DeleteOrganizationInput struct {
	OrganizationID gid.GID `json:"organizationId"`
}

type DeleteOrganizationPayload struct {
	DeletedOrganizationID gid.GID `json:"deletedOrganizationId"`
}

type DeletePeopleInput struct {
	PeopleID gid.GID `json:"peopleId"`
}

type DeletePeoplePayload struct {
	DeletedPeopleID gid.GID `json:"deletedPeopleId"`
}

type DeleteRiskDocumentMappingInput struct {
	RiskID     gid.GID `json:"riskId"`
	DocumentID gid.GID `json:"documentId"`
}

type DeleteRiskDocumentMappingPayload struct {
	DeletedRiskID     gid.GID `json:"deletedRiskId"`
	DeletedDocumentID gid.GID `json:"deletedDocumentId"`
}

type DeleteRiskInput struct {
	RiskID gid.GID `json:"riskId"`
}

type DeleteRiskMeasureMappingInput struct {
	RiskID    gid.GID `json:"riskId"`
	MeasureID gid.GID `json:"measureId"`
}

type DeleteRiskMeasureMappingPayload struct {
	DeletedMeasureID gid.GID `json:"deletedMeasureId"`
	DeletedRiskID    gid.GID `json:"deletedRiskId"`
}

type DeleteRiskPayload struct {
	DeletedRiskID gid.GID `json:"deletedRiskId"`
}

type DeleteTaskInput struct {
	TaskID gid.GID `json:"taskId"`
}

type DeleteTaskPayload struct {
	DeletedTaskID gid.GID `json:"deletedTaskId"`
}

type DeleteVendorComplianceReportInput struct {
	ReportID gid.GID `json:"reportId"`
}

type DeleteVendorComplianceReportPayload struct {
	DeletedVendorComplianceReportID gid.GID `json:"deletedVendorComplianceReportId"`
}

type DeleteVendorInput struct {
	VendorID gid.GID `json:"vendorId"`
}

type DeleteVendorPayload struct {
	DeletedVendorID gid.GID `json:"deletedVendorId"`
}

type Document struct {
	ID                      gid.GID                    `json:"id"`
	Title                   string                     `json:"title"`
	Description             string                     `json:"description"`
	DocumentType            coredata.DocumentType      `json:"documentType"`
	CurrentPublishedVersion *int                       `json:"currentPublishedVersion,omitempty"`
	Owner                   *People                    `json:"owner"`
	Organization            *Organization              `json:"organization"`
	Versions                *DocumentVersionConnection `json:"versions"`
	Controls                *ControlConnection         `json:"controls"`
	CreatedAt               time.Time                  `json:"createdAt"`
	UpdatedAt               time.Time                  `json:"updatedAt"`
}

func (Document) IsNode()             {}
func (this Document) GetID() gid.GID { return this.ID }

type DocumentConnection struct {
	Edges    []*DocumentEdge `json:"edges"`
	PageInfo *PageInfo       `json:"pageInfo"`
}

type DocumentEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Document      `json:"node"`
}

type DocumentVersion struct {
	ID          gid.GID                             `json:"id"`
	Document    *Document                           `json:"document"`
	Status      coredata.DocumentStatus             `json:"status"`
	Version     int                                 `json:"version"`
	Content     string                              `json:"content"`
	Changelog   string                              `json:"changelog"`
	Signatures  *DocumentVersionSignatureConnection `json:"signatures"`
	PublishedBy *People                             `json:"publishedBy,omitempty"`
	PublishedAt *time.Time                          `json:"publishedAt,omitempty"`
	CreatedAt   time.Time                           `json:"createdAt"`
	UpdatedAt   time.Time                           `json:"updatedAt"`
}

func (DocumentVersion) IsNode()             {}
func (this DocumentVersion) GetID() gid.GID { return this.ID }

type DocumentVersionConnection struct {
	Edges    []*DocumentVersionEdge `json:"edges"`
	PageInfo *PageInfo              `json:"pageInfo"`
}

type DocumentVersionEdge struct {
	Cursor page.CursorKey   `json:"cursor"`
	Node   *DocumentVersion `json:"node"`
}

type DocumentVersionFilter struct {
	Status *coredata.DocumentStatus `json:"status,omitempty"`
}

type DocumentVersionSignature struct {
	ID              gid.GID                                `json:"id"`
	DocumentVersion *DocumentVersion                       `json:"documentVersion"`
	State           coredata.DocumentVersionSignatureState `json:"state"`
	SignedBy        *People                                `json:"signedBy"`
	SignedAt        *time.Time                             `json:"signedAt,omitempty"`
	RequestedAt     time.Time                              `json:"requestedAt"`
	RequestedBy     *People                                `json:"requestedBy"`
	CreatedAt       time.Time                              `json:"createdAt"`
	UpdatedAt       time.Time                              `json:"updatedAt"`
}

func (DocumentVersionSignature) IsNode()             {}
func (this DocumentVersionSignature) GetID() gid.GID { return this.ID }

type DocumentVersionSignatureConnection struct {
	Edges    []*DocumentVersionSignatureEdge `json:"edges"`
	PageInfo *PageInfo                       `json:"pageInfo"`
}

type DocumentVersionSignatureEdge struct {
	Cursor page.CursorKey            `json:"cursor"`
	Node   *DocumentVersionSignature `json:"node"`
}

type DocumentVersionSignatureOrder struct {
	Field     coredata.DocumentVersionSignatureOrderField `json:"field"`
	Direction page.OrderDirection                         `json:"direction"`
}

type Evidence struct {
	ID          gid.GID                `json:"id"`
	FileURL     *string                `json:"fileUrl,omitempty"`
	MimeType    string                 `json:"mimeType"`
	Size        int                    `json:"size"`
	State       coredata.EvidenceState `json:"state"`
	Type        coredata.EvidenceType  `json:"type"`
	Filename    string                 `json:"filename"`
	URL         *string                `json:"url,omitempty"`
	Description string                 `json:"description"`
	Task        *Task                  `json:"task,omitempty"`
	Measure     *Measure               `json:"measure"`
	CreatedAt   time.Time              `json:"createdAt"`
	UpdatedAt   time.Time              `json:"updatedAt"`
}

func (Evidence) IsNode()             {}
func (this Evidence) GetID() gid.GID { return this.ID }

type EvidenceConnection struct {
	Edges    []*EvidenceEdge `json:"edges"`
	PageInfo *PageInfo       `json:"pageInfo"`
}

type EvidenceEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Evidence      `json:"node"`
}

type ExportAuditInput struct {
	FrameworkID gid.GID `json:"frameworkId"`
}

type ExportAuditPayload struct {
	URL string `json:"url"`
}

type Framework struct {
	ID           gid.GID            `json:"id"`
	Name         string             `json:"name"`
	Description  string             `json:"description"`
	Organization *Organization      `json:"organization"`
	Controls     *ControlConnection `json:"controls"`
	CreatedAt    time.Time          `json:"createdAt"`
	UpdatedAt    time.Time          `json:"updatedAt"`
}

func (Framework) IsNode()             {}
func (this Framework) GetID() gid.GID { return this.ID }

type FrameworkConnection struct {
	Edges    []*FrameworkEdge `json:"edges"`
	PageInfo *PageInfo        `json:"pageInfo"`
}

type FrameworkEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Framework     `json:"node"`
}

type FulfillEvidenceInput struct {
	EvidenceID gid.GID         `json:"evidenceId"`
	Name       *string         `json:"name,omitempty"`
	File       *graphql.Upload `json:"file,omitempty"`
	URL        *string         `json:"url,omitempty"`
}

type FulfillEvidencePayload struct {
	EvidenceEdge *EvidenceEdge `json:"evidenceEdge"`
}

type ImportFrameworkInput struct {
	OrganizationID gid.GID        `json:"organizationId"`
	File           graphql.Upload `json:"file"`
}

type ImportFrameworkPayload struct {
	FrameworkEdge *FrameworkEdge `json:"frameworkEdge"`
}

type ImportMeasureInput struct {
	OrganizationID gid.GID        `json:"organizationId"`
	File           graphql.Upload `json:"file"`
}

type ImportMeasurePayload struct {
	MeasureEdges []*MeasureEdge `json:"measureEdges"`
}

type InviteUserInput struct {
	OrganizationID gid.GID `json:"organizationId"`
	Email          string  `json:"email"`
	FullName       string  `json:"fullName"`
}

type InviteUserPayload struct {
	Success bool `json:"success"`
}

type Measure struct {
	ID          gid.GID               `json:"id"`
	Category    string                `json:"category"`
	Name        string                `json:"name"`
	Description string                `json:"description"`
	State       coredata.MeasureState `json:"state"`
	Evidences   *EvidenceConnection   `json:"evidences"`
	Tasks       *TaskConnection       `json:"tasks"`
	Risks       *RiskConnection       `json:"risks"`
	Controls    *ControlConnection    `json:"controls"`
	CreatedAt   time.Time             `json:"createdAt"`
	UpdatedAt   time.Time             `json:"updatedAt"`
}

func (Measure) IsNode()             {}
func (this Measure) GetID() gid.GID { return this.ID }

type MeasureConnection struct {
	Edges    []*MeasureEdge `json:"edges"`
	PageInfo *PageInfo      `json:"pageInfo"`
}

type MeasureEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Measure       `json:"node"`
}

type Mutation struct {
}

type Organization struct {
	ID         gid.GID              `json:"id"`
	Name       string               `json:"name"`
	LogoURL    *string              `json:"logoUrl,omitempty"`
	Users      *UserConnection      `json:"users"`
	Connectors *ConnectorConnection `json:"connectors"`
	Frameworks *FrameworkConnection `json:"frameworks"`
	Vendors    *VendorConnection    `json:"vendors"`
	Peoples    *PeopleConnection    `json:"peoples"`
	Documents  *DocumentConnection  `json:"documents"`
	Measures   *MeasureConnection   `json:"measures"`
	Risks      *RiskConnection      `json:"risks"`
	Tasks      *TaskConnection      `json:"tasks"`
	CreatedAt  time.Time            `json:"createdAt"`
	UpdatedAt  time.Time            `json:"updatedAt"`
}

func (Organization) IsNode()             {}
func (this Organization) GetID() gid.GID { return this.ID }

type OrganizationConnection struct {
	Edges    []*OrganizationEdge `json:"edges"`
	PageInfo *PageInfo           `json:"pageInfo"`
}

type OrganizationEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Organization  `json:"node"`
}

type OrganizationOrder struct {
	Direction page.OrderDirection    `json:"direction"`
	Field     OrganizationOrderField `json:"field"`
}

type PageInfo struct {
	HasNextPage     bool            `json:"hasNextPage"`
	HasPreviousPage bool            `json:"hasPreviousPage"`
	StartCursor     *page.CursorKey `json:"startCursor,omitempty"`
	EndCursor       *page.CursorKey `json:"endCursor,omitempty"`
}

type People struct {
	ID                       gid.GID             `json:"id"`
	FullName                 string              `json:"fullName"`
	PrimaryEmailAddress      string              `json:"primaryEmailAddress"`
	AdditionalEmailAddresses []string            `json:"additionalEmailAddresses"`
	Kind                     coredata.PeopleKind `json:"kind"`
	Position                 *string             `json:"position,omitempty"`
	ContractStartDate        *time.Time          `json:"contractStartDate,omitempty"`
	ContractEndDate          *time.Time          `json:"contractEndDate,omitempty"`
	CreatedAt                time.Time           `json:"createdAt"`
	UpdatedAt                time.Time           `json:"updatedAt"`
}

func (People) IsNode()             {}
func (this People) GetID() gid.GID { return this.ID }

type PeopleConnection struct {
	Edges    []*PeopleEdge `json:"edges"`
	PageInfo *PageInfo     `json:"pageInfo"`
}

type PeopleEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *People        `json:"node"`
}

type PublishDocumentVersionInput struct {
	DocumentID gid.GID `json:"documentId"`
}

type PublishDocumentVersionPayload struct {
	DocumentVersion *DocumentVersion `json:"documentVersion"`
	Document        *Document        `json:"document"`
}

type Query struct {
}

type RemoveUserInput struct {
	OrganizationID gid.GID `json:"organizationId"`
	UserID         gid.GID `json:"userId"`
}

type RemoveUserPayload struct {
	Success bool `json:"success"`
}

type RequestEvidenceInput struct {
	TaskID      gid.GID               `json:"taskId"`
	Name        string                `json:"name"`
	Type        coredata.EvidenceType `json:"type"`
	Description string                `json:"description"`
}

type RequestEvidencePayload struct {
	EvidenceEdge *EvidenceEdge `json:"evidenceEdge"`
}

type RequestSignatureInput struct {
	DocumentVersionID gid.GID `json:"documentVersionId"`
	SignatoryID       gid.GID `json:"signatoryId"`
}

type RequestSignaturePayload struct {
	DocumentVersionSignatureEdge *DocumentVersionSignatureEdge `json:"documentVersionSignatureEdge"`
}

type Risk struct {
	ID                 gid.GID                `json:"id"`
	Name               string                 `json:"name"`
	Description        string                 `json:"description"`
	Category           string                 `json:"category"`
	Treatment          coredata.RiskTreatment `json:"treatment"`
	InherentLikelihood int                    `json:"inherentLikelihood"`
	InherentImpact     int                    `json:"inherentImpact"`
	InherentRiskScore  int                    `json:"inherentRiskScore"`
	ResidualLikelihood int                    `json:"residualLikelihood"`
	ResidualImpact     int                    `json:"residualImpact"`
	ResidualRiskScore  int                    `json:"residualRiskScore"`
	Note               string                 `json:"note"`
	Owner              *People                `json:"owner,omitempty"`
	Organization       *Organization          `json:"organization"`
	Measures           *MeasureConnection     `json:"measures"`
	Documents          *DocumentConnection    `json:"documents"`
	Controls           *ControlConnection     `json:"controls"`
	CreatedAt          time.Time              `json:"createdAt"`
	UpdatedAt          time.Time              `json:"updatedAt"`
}

func (Risk) IsNode()             {}
func (this Risk) GetID() gid.GID { return this.ID }

type RiskConnection struct {
	Edges    []*RiskEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type RiskEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Risk          `json:"node"`
}

type SendSigningNotificationsInput struct {
	OrganizationID gid.GID `json:"organizationId"`
}

type SendSigningNotificationsPayload struct {
	Success bool `json:"success"`
}

type Session struct {
	ID        gid.GID   `json:"id"`
	ExpiresAt time.Time `json:"expiresAt"`
}

type Task struct {
	ID           gid.GID             `json:"id"`
	Name         string              `json:"name"`
	Description  string              `json:"description"`
	State        coredata.TaskState  `json:"state"`
	TimeEstimate *time.Duration      `json:"timeEstimate,omitempty"`
	Deadline     *time.Time          `json:"deadline,omitempty"`
	AssignedTo   *People             `json:"assignedTo,omitempty"`
	Organization *Organization       `json:"organization"`
	Measure      *Measure            `json:"measure,omitempty"`
	Evidences    *EvidenceConnection `json:"evidences"`
	CreatedAt    time.Time           `json:"createdAt"`
	UpdatedAt    time.Time           `json:"updatedAt"`
}

func (Task) IsNode()             {}
func (this Task) GetID() gid.GID { return this.ID }

type TaskConnection struct {
	Edges    []*TaskEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type TaskEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Task          `json:"node"`
}

type UnassignTaskInput struct {
	TaskID gid.GID `json:"taskId"`
}

type UnassignTaskPayload struct {
	Task *Task `json:"task"`
}

type UpdateDocumentInput struct {
	ID           gid.GID                `json:"id"`
	Title        *string                `json:"title,omitempty"`
	Content      *string                `json:"content,omitempty"`
	OwnerID      *gid.GID               `json:"ownerId,omitempty"`
	CreatedBy    *gid.GID               `json:"createdBy,omitempty"`
	DocumentType *coredata.DocumentType `json:"documentType,omitempty"`
}

type UpdateDocumentPayload struct {
	Document *Document `json:"document"`
}

type UpdateDocumentVersionInput struct {
	DocumentVersionID gid.GID `json:"documentVersionId"`
	Content           string  `json:"content"`
}

type UpdateDocumentVersionPayload struct {
	DocumentVersion *DocumentVersion `json:"documentVersion"`
}

type UpdateFrameworkInput struct {
	ID          gid.GID `json:"id"`
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type UpdateFrameworkPayload struct {
	Framework *Framework `json:"framework"`
}

type UpdateMeasureInput struct {
	ID          gid.GID                `json:"id"`
	Name        *string                `json:"name,omitempty"`
	Description *string                `json:"description,omitempty"`
	Category    *string                `json:"category,omitempty"`
	State       *coredata.MeasureState `json:"state,omitempty"`
}

type UpdateMeasurePayload struct {
	Measure *Measure `json:"measure"`
}

type UpdateOrganizationInput struct {
	OrganizationID gid.GID         `json:"organizationId"`
	Name           *string         `json:"name,omitempty"`
	Logo           *graphql.Upload `json:"logo,omitempty"`
}

type UpdateOrganizationPayload struct {
	Organization *Organization `json:"organization"`
}

type UpdatePeopleInput struct {
	ID                       gid.GID              `json:"id"`
	FullName                 *string              `json:"fullName,omitempty"`
	PrimaryEmailAddress      *string              `json:"primaryEmailAddress,omitempty"`
	AdditionalEmailAddresses []string             `json:"additionalEmailAddresses,omitempty"`
	Kind                     *coredata.PeopleKind `json:"kind,omitempty"`
	Position                 *string              `json:"position,omitempty"`
	ContractStartDate        *time.Time           `json:"contractStartDate,omitempty"`
	ContractEndDate          *time.Time           `json:"contractEndDate,omitempty"`
}

type UpdatePeoplePayload struct {
	People *People `json:"people"`
}

type UpdateRiskInput struct {
	ID                 gid.GID                 `json:"id"`
	Name               *string                 `json:"name,omitempty"`
	Description        *string                 `json:"description,omitempty"`
	Category           *string                 `json:"category,omitempty"`
	OwnerID            *gid.GID                `json:"ownerId,omitempty"`
	Treatment          *coredata.RiskTreatment `json:"treatment,omitempty"`
	InherentLikelihood *int                    `json:"inherentLikelihood,omitempty"`
	InherentImpact     *int                    `json:"inherentImpact,omitempty"`
	ResidualLikelihood *int                    `json:"residualLikelihood,omitempty"`
	ResidualImpact     *int                    `json:"residualImpact,omitempty"`
	Note               *string                 `json:"note,omitempty"`
}

type UpdateRiskPayload struct {
	Risk *Risk `json:"risk"`
}

type UpdateTaskInput struct {
	TaskID       gid.GID             `json:"taskId"`
	Name         *string             `json:"name,omitempty"`
	Description  *string             `json:"description,omitempty"`
	State        *coredata.TaskState `json:"state,omitempty"`
	TimeEstimate *time.Duration      `json:"timeEstimate,omitempty"`
	Deadline     *time.Time          `json:"deadline,omitempty"`
}

type UpdateTaskPayload struct {
	Task *Task `json:"task"`
}

type UpdateVendorInput struct {
	ID                            gid.GID                  `json:"id"`
	Name                          *string                  `json:"name,omitempty"`
	Description                   *string                  `json:"description,omitempty"`
	StatusPageURL                 *string                  `json:"statusPageUrl,omitempty"`
	TermsOfServiceURL             *string                  `json:"termsOfServiceUrl,omitempty"`
	PrivacyPolicyURL              *string                  `json:"privacyPolicyUrl,omitempty"`
	ServiceLevelAgreementURL      *string                  `json:"serviceLevelAgreementUrl,omitempty"`
	DataProcessingAgreementURL    *string                  `json:"dataProcessingAgreementUrl,omitempty"`
	BusinessAssociateAgreementURL *string                  `json:"businessAssociateAgreementUrl,omitempty"`
	SubprocessorsListURL          *string                  `json:"subprocessorsListUrl,omitempty"`
	WebsiteURL                    *string                  `json:"websiteUrl,omitempty"`
	LegalName                     *string                  `json:"legalName,omitempty"`
	HeadquarterAddress            *string                  `json:"headquarterAddress,omitempty"`
	Category                      *coredata.VendorCategory `json:"category,omitempty"`
	Certifications                []string                 `json:"certifications,omitempty"`
	SecurityPageURL               *string                  `json:"securityPageUrl,omitempty"`
	TrustPageURL                  *string                  `json:"trustPageUrl,omitempty"`
	BusinessOwnerID               *gid.GID                 `json:"businessOwnerId,omitempty"`
	SecurityOwnerID               *gid.GID                 `json:"securityOwnerId,omitempty"`
}

type UpdateVendorPayload struct {
	Vendor *Vendor `json:"vendor"`
}

type UploadMeasureEvidenceInput struct {
	MeasureID gid.GID        `json:"measureId"`
	File      graphql.Upload `json:"file"`
}

type UploadMeasureEvidencePayload struct {
	EvidenceEdge *EvidenceEdge `json:"evidenceEdge"`
}

type UploadTaskEvidenceInput struct {
	TaskID gid.GID        `json:"taskId"`
	File   graphql.Upload `json:"file"`
}

type UploadTaskEvidencePayload struct {
	EvidenceEdge *EvidenceEdge `json:"evidenceEdge"`
}

type UploadVendorComplianceReportInput struct {
	VendorID   gid.GID        `json:"vendorId"`
	ReportDate time.Time      `json:"reportDate"`
	ValidUntil *time.Time     `json:"validUntil,omitempty"`
	ReportName string         `json:"reportName"`
	File       graphql.Upload `json:"file"`
}

type UploadVendorComplianceReportPayload struct {
	VendorComplianceReportEdge *VendorComplianceReportEdge `json:"vendorComplianceReportEdge"`
}

type User struct {
	ID        gid.GID   `json:"id"`
	FullName  string    `json:"fullName"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	People    *People   `json:"people,omitempty"`
}

func (User) IsNode()             {}
func (this User) GetID() gid.GID { return this.ID }

type UserConnection struct {
	Edges    []*UserEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type UserEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *User          `json:"node"`
}

type Vendor struct {
	ID                            gid.GID                           `json:"id"`
	Name                          string                            `json:"name"`
	Category                      coredata.VendorCategory           `json:"category"`
	Description                   *string                           `json:"description,omitempty"`
	Organization                  *Organization                     `json:"organization"`
	ComplianceReports             *VendorComplianceReportConnection `json:"complianceReports"`
	RiskAssessments               *VendorRiskAssessmentConnection   `json:"riskAssessments"`
	BusinessOwner                 *People                           `json:"businessOwner,omitempty"`
	SecurityOwner                 *People                           `json:"securityOwner,omitempty"`
	StatusPageURL                 *string                           `json:"statusPageUrl,omitempty"`
	TermsOfServiceURL             *string                           `json:"termsOfServiceUrl,omitempty"`
	PrivacyPolicyURL              *string                           `json:"privacyPolicyUrl,omitempty"`
	ServiceLevelAgreementURL      *string                           `json:"serviceLevelAgreementUrl,omitempty"`
	DataProcessingAgreementURL    *string                           `json:"dataProcessingAgreementUrl,omitempty"`
	BusinessAssociateAgreementURL *string                           `json:"businessAssociateAgreementUrl,omitempty"`
	SubprocessorsListURL          *string                           `json:"subprocessorsListUrl,omitempty"`
	Certifications                []string                          `json:"certifications"`
	SecurityPageURL               *string                           `json:"securityPageUrl,omitempty"`
	TrustPageURL                  *string                           `json:"trustPageUrl,omitempty"`
	HeadquarterAddress            *string                           `json:"headquarterAddress,omitempty"`
	LegalName                     *string                           `json:"legalName,omitempty"`
	WebsiteURL                    *string                           `json:"websiteUrl,omitempty"`
	CreatedAt                     time.Time                         `json:"createdAt"`
	UpdatedAt                     time.Time                         `json:"updatedAt"`
}

func (Vendor) IsNode()             {}
func (this Vendor) GetID() gid.GID { return this.ID }

type VendorComplianceReport struct {
	ID         gid.GID    `json:"id"`
	Vendor     *Vendor    `json:"vendor"`
	ReportDate time.Time  `json:"reportDate"`
	ValidUntil *time.Time `json:"validUntil,omitempty"`
	ReportName string     `json:"reportName"`
	FileURL    string     `json:"fileUrl"`
	FileSize   int        `json:"fileSize"`
	CreatedAt  time.Time  `json:"createdAt"`
	UpdatedAt  time.Time  `json:"updatedAt"`
}

func (VendorComplianceReport) IsNode()             {}
func (this VendorComplianceReport) GetID() gid.GID { return this.ID }

type VendorComplianceReportConnection struct {
	Edges    []*VendorComplianceReportEdge `json:"edges"`
	PageInfo *PageInfo                     `json:"pageInfo"`
}

type VendorComplianceReportEdge struct {
	Cursor page.CursorKey          `json:"cursor"`
	Node   *VendorComplianceReport `json:"node"`
}

type VendorConnection struct {
	Edges    []*VendorEdge `json:"edges"`
	PageInfo *PageInfo     `json:"pageInfo"`
}

type VendorEdge struct {
	Cursor page.CursorKey `json:"cursor"`
	Node   *Vendor        `json:"node"`
}

type VendorRiskAssessment struct {
	ID              gid.GID                  `json:"id"`
	Vendor          *Vendor                  `json:"vendor"`
	AssessedAt      time.Time                `json:"assessedAt"`
	AssessedBy      *People                  `json:"assessedBy"`
	ExpiresAt       time.Time                `json:"expiresAt"`
	DataSensitivity coredata.DataSensitivity `json:"dataSensitivity"`
	BusinessImpact  coredata.BusinessImpact  `json:"businessImpact"`
	Notes           *string                  `json:"notes,omitempty"`
	CreatedAt       time.Time                `json:"createdAt"`
	UpdatedAt       time.Time                `json:"updatedAt"`
}

func (VendorRiskAssessment) IsNode()             {}
func (this VendorRiskAssessment) GetID() gid.GID { return this.ID }

type VendorRiskAssessmentConnection struct {
	Edges    []*VendorRiskAssessmentEdge `json:"edges"`
	PageInfo *PageInfo                   `json:"pageInfo"`
}

type VendorRiskAssessmentEdge struct {
	Cursor page.CursorKey        `json:"cursor"`
	Node   *VendorRiskAssessment `json:"node"`
}

type VendorRiskAssessmentOrder struct {
	Field     coredata.VendorRiskAssessmentOrderField `json:"field"`
	Direction page.OrderDirection                     `json:"direction"`
}

type Viewer struct {
	ID            gid.GID                 `json:"id"`
	User          *User                   `json:"user"`
	Organizations *OrganizationConnection `json:"organizations"`
}

type OrganizationOrderField string

const (
	OrganizationOrderFieldName      OrganizationOrderField = "NAME"
	OrganizationOrderFieldCreatedAt OrganizationOrderField = "CREATED_AT"
	OrganizationOrderFieldUpdatedAt OrganizationOrderField = "UPDATED_AT"
)

var AllOrganizationOrderField = []OrganizationOrderField{
	OrganizationOrderFieldName,
	OrganizationOrderFieldCreatedAt,
	OrganizationOrderFieldUpdatedAt,
}

func (e OrganizationOrderField) IsValid() bool {
	switch e {
	case OrganizationOrderFieldName, OrganizationOrderFieldCreatedAt, OrganizationOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e OrganizationOrderField) String() string {
	return string(e)
}

func (e *OrganizationOrderField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationOrderField", str)
	}
	return nil
}

func (e OrganizationOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrganizationOrderField) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrganizationOrderField) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
